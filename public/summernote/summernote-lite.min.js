/*! Summernote v0.8.10 | (c) 2013- Alan Hong and other contributors | MIT license */

!(function (t, e) { typeof exports==='object'&&typeof module!=='undefined'?e(require('jquery')):typeof define==='function'&&define.amd?define(['jquery'], e):e(t.jQuery) }(this, function (f) { 'use strict'; f=f&&f.hasOwnProperty('default')?f.default:f; var i=(function () { function t (t, e, o, n) { this.markup=t, this.children=e, this.options=o, this.callback=n } return t.prototype.render=function (t) { var o=f(this.markup); if (this.options&&this.options.contents&&o.html(this.options.contents), this.options&&this.options.className&&o.addClass(this.options.className), this.options&&this.options.data&&f.each(this.options.data, function (t, e) { o.attr('data-'+t, e) }), this.options&&this.options.click&&o.on('click', this.options.click), this.children) { var e=o.find('.note-children-container'); this.children.forEach(function (t) { t.render(e.length?e:o) }) } return this.callback&&this.callback(o, this.options), this.options&&this.options.callback&&this.options.callback(o), t&&t.append(o), o }, t }()), t=function (o, n) { return function () { var t=typeof arguments[1]==='object'?arguments[1]:arguments[0], e=f.isArray(arguments[0])?arguments[0]:[]; return t&&t.children&&(e=t.children), new i(o, e, t, n) } }, p=(function () { function t (e, t) { if (this.$node=e, this.options=$.extend({}, { title: '', target: t.container, trigger: 'hover focus', placement: 'bottom' }, t), this.$tooltip=$(['<div class="note-tooltip in">', '  <div class="note-tooltip-arrow"/>', '  <div class="note-tooltip-content"/>', '</div>'].join('')), this.options.trigger!=='manual') { var o=this.show.bind(this), n=this.hide.bind(this), i=this.toggle.bind(this); this.options.trigger.split(' ').forEach(function (t) { t==='hover'?(e.off('mouseenter mouseleave'), e.on('mouseenter', o).on('mouseleave', n)):t==='click'?e.on('click', i):t==='focus'&&e.on('focus', o).on('blur', n) }) } } return t.prototype.show=function () { var t=this.$node, e=t.offset(), o=this.$tooltip, n=this.options.title||t.attr('title')||t.data('title'), i=this.options.placement||t.data('placement'); o.addClass(i), o.addClass('in'), o.find('.note-tooltip-content').text(n), o.appendTo(this.options.target); var r=t.outerWidth(), a=t.outerHeight(), s=o.outerWidth(), l=o.outerHeight(); i==='bottom'?o.css({ top: e.top+a, left: e.left+(r/2-s/2) }):i==='top'?o.css({ top: e.top-l, left: e.left+(r/2-s/2) }):i==='left'?o.css({ top: e.top+(a/2-l/2), left: e.left-s }):i==='right'&&o.css({ top: e.top+(a/2-l/2), left: e.left+r }) }, t.prototype.hide=function () { this.$tooltip.removeClass('in'), this.$tooltip.remove() }, t.prototype.toggle=function () { this.$tooltip.hasClass('in')?this.hide():this.show() }, t }()), o=(function () { function t (t, e) { this.$button=t, this.options=$.extend({}, { target: e.container }, e), this.setEvent() } return t.prototype.setEvent=function () { this.$button.on('click', this.toggle.bind(this)) }, t.prototype.clear=function () { var t=$('.note-btn-group.open'); t.find('.note-btn.active').removeClass('active'), t.removeClass('open') }, t.prototype.show=function () { this.$button.addClass('active'), this.$button.parent().addClass('open'); var t=this.$button.next(), e=t.offset(), o=t.outerWidth(), n=$(window).width(), i=parseFloat($(this.options.target).css('margin-right')); e.left+o>n-i?t.css('margin-left', n-i-(e.left+o)):t.css('margin-left', '') }, t.prototype.hide=function () { this.$button.removeClass('active'), this.$button.parent().removeClass('open') }, t.prototype.toggle=function () { var t=this.$button.parent().hasClass('open'); this.clear(), t?this.hide():this.show() }, t }()); $(document).on('click', function (t) { $(t.target).closest('.note-btn-group').length||$('.note-btn-group.open').removeClass('open') }), $(document).on('click.note-dropdown-menu', function (t) { $(t.target).closest('.note-dropdown-menu').parent().removeClass('open') }); var n=(function () { function t (t, e) { this.options=$.extend({}, { target: e.container||'body' }, e), this.$modal=t, this.$backdrop=$('<div class="note-modal-backdrop" />') } return t.prototype.show=function () { this.options.target==='body'?(this.$backdrop.css('position', 'fixed'), this.$modal.css('position', 'fixed')):(this.$backdrop.css('position', 'absolute'), this.$modal.css('position', 'absolute')), this.$backdrop.appendTo(this.options.target).show(), this.$modal.appendTo(this.options.target).addClass('open').show(), this.$modal.trigger('note.modal.show'), this.$modal.off('click', '.close').on('click', '.close', this.hide.bind(this)) }, t.prototype.hide=function () { this.$modal.removeClass('open').hide(), this.$backdrop.hide(), this.$modal.trigger('note.modal.hide') }, t }()), e=t('<div class="note-editor note-frame"/>'), r=t('<div class="note-toolbar" role="toolbar"/>'), a=t('<div class="note-editing-area"/>'), s=t('<textarea class="note-codable" role="textbox" aria-multiline="true"/>'), l=t('<div class="note-editable" contentEditable="true" role="textbox" aria-multiline="true"/>'), c=t(['<output class="note-status-output" role="status" aria-live="polite"/>', '<div class="note-statusbar" role="resize">', '  <div class="note-resizebar" role="seperator" aria-orientation="horizontal" aria-label="resize">', '    <div class="note-icon-bar"/>', '    <div class="note-icon-bar"/>', '    <div class="note-icon-bar"/>', '  </div>', '</div>'].join('')), d=t('<div class="note-editor"/>'), u=t(['<output class="note-status-output" role="status" aria-live="polite"/>', '<div class="note-editable" contentEditable="true" role="textbox" aria-multiline="true"/>'].join('')), h=t('<div class="note-btn-group">'), m=t('<button type="button" class="note-btn" role="button" tabindex="-1">', function (t, e) { e&&e.tooltip&&(t.attr({ 'aria-label': e.tooltip }), t.data('_lite_tooltip', new p(t, { title: e.tooltip, container: e.container }))), e.contents&&t.html(e.contents), e&&e.data&&e.data.toggle==='dropdown'&&t.data('_lite_dropdown', new o(t, { container: e.container })) }), g=t('<div class="note-dropdown-menu" role="list">', function (t, i) { var e=$.isArray(i.items)?i.items.map(function (t) { var e=typeof t==='string'?t:t.value||'', o=i.template?i.template(t):t, n=$('<a class="note-dropdown-item" href="#" data-value="'+e+'" role="listitem" aria-label="'+t+'"></a>'); return n.html(o).data('item', t), n }):i.items; t.html(e).attr({ 'aria-label': i.title }), t.on('click', '> .note-dropdown-item', function (t) { var e=$(this), o=e.data('item'), n=e.data('value'); o.click?o.click(e):i.itemClick&&i.itemClick(t, o, n) }) }), v=t('<div class="note-dropdown-menu note-check" role="list">', function (t, i) { var e=$.isArray(i.items)?i.items.map(function (t) { var e=typeof t==='string'?t:t.value||'', o=i.template?i.template(t):t, n=$('<a class="note-dropdown-item" href="#" data-value="'+e+'" role="listitem" aria-label="'+t+'"></a>'); return n.html([w(i.checkClassName), ' ', o]).data('item', t), n }):i.items; t.html(e).attr({ 'aria-label': i.title }), t.on('click', '> .note-dropdown-item', function (t) { var e=$(this), o=e.data('item'), n=e.data('value'); o.click?o.click(e):i.itemClick&&i.itemClick(t, o, n) }) }), b=t('<div class="note-color-palette"/>', function (t, e) { for (var o=[], n=0, i=e.colors.length; n<i; n++) { for (var r=e.eventName, a=e.colors[n], s=e.colorsName[n], l=[], c=0, d=a.length; c<d; c++) { var u=a[c], h=s[c]; l.push(['<button type="button" class="note-btn note-color-btn"', 'style="background-color:', u, '" ', 'data-event="', r, '" ', 'data-value="', u, '" ', 'title="', h, '" ', 'aria-label="', h, '" ', 'data-toggle="button" tabindex="-1"></button>'].join('')) }o.push('<div class="note-color-row">'+l.join('')+'</div>') }t.html(o.join('')), t.find('.note-color-btn').each(function () { $(this).data('_lite_tooltip', new p($(this), { container: e.container })) }) }), y=t('<div class="note-modal" aria-hidden="false" tabindex="-1" role="dialog"/>', function (t, e) { e.fade&&t.addClass('fade'), t.attr({ 'aria-label': e.title }), t.html(['  <div class="note-modal-content">', e.title?'    <div class="note-modal-header">      <button type="button" class="close" aria-label="Close" aria-hidden="true"><i class="note-icon-close"></i></button>      <h4 class="note-modal-title">'+e.title+'</h4>    </div>':'', '    <div class="note-modal-body">'+e.body+'</div>', e.footer?'    <div class="note-modal-footer">'+e.footer+'</div>':'', '  </div>'].join('')), t.data('modal', new n(t, e)) }), C=t(['<div class="note-popover bottom">', '  <div class="note-popover-arrow"/>', '  <div class="note-popover-content note-children-container"/>', '</div>'].join(''), function (t, e) { var o=void 0!==e.direction?e.direction:'bottom'; t.addClass(o).hide(), e.hideArrow&&t.find('.note-popover-arrow').hide() }), k=t('<div class="checkbox"></div>', function (t, e) { t.html([' <label'+(e.id?' for="'+e.id+'"':'')+'>', ' <input role="checkbox" type="checkbox"'+(e.id?' id="'+e.id+'"':''), e.checked?' checked':'', ' aria-checked="'+(e.checked?'true':'false')+'"/>', e.text?e.text:'', '</label>'].join('')) }), w=function (t, e) { return '<'+(e=e||'i')+' class="'+t+'"/>' }, x={ editor: e, toolbar: r, editingArea: a, codable: s, editable: l, statusbar: c, airEditor: d, airEditable: u, buttonGroup: h, button: m, dropdown: g, dropdownCheck: v, dropdownButton: function (t, e) { return h([m({ className: 'dropdown-toggle', contents: t.title+' '+w('note-icon-caret'), tooltip: t.tooltip, data: { toggle: 'dropdown' } }), g({ className: t.className, items: t.items, template: t.template, itemClick: t.itemClick })], { callback: e }).render() }, dropdownButtonContents: function (t, e) { return t+' '+w(e.icons.caret, 'span') }, dropdownCheckButton: function (t, e) { return h([m({ className: 'dropdown-toggle', contents: t.title+' '+w('note-icon-caret'), tooltip: t.tooltip, data: { toggle: 'dropdown' } }), v({ className: t.className, checkClassName: t.checkClassName, items: t.items, template: t.template, itemClick: t.itemClick })], { callback: e }).render() }, paragraphDropdownButton: function (t) { return h([m({ className: 'dropdown-toggle', contents: t.title+' '+w('note-icon-caret'), tooltip: t.tooltip, data: { toggle: 'dropdown' } }), g([h({ className: 'note-align', children: t.items[0] }), h({ className: 'note-list', children: t.items[1] })])]).render() }, tableDropdownButton: function (e) { return h([m({ className: 'dropdown-toggle', contents: e.title+' '+w('note-icon-caret'), tooltip: e.tooltip, data: { toggle: 'dropdown' } }), g({ className: 'note-table', items: ['<div class="note-dimension-picker">', '  <div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"/>', '  <div class="note-dimension-picker-highlighted"/>', '  <div class="note-dimension-picker-unhighlighted"/>', '</div>', '<div class="note-dimension-display">1 x 1</div>'].join('') })], { callback: function (t) { t.find('.note-dimension-picker-mousecatcher').css({ width: e.col+'em', height: e.row+'em' }).mousedown(e.itemClick).mousemove(function (t) { !(function (t, e, o) { var n, i=$(t.target.parentNode), r=i.next(), a=i.find('.note-dimension-picker-mousecatcher'), s=i.find('.note-dimension-picker-highlighted'), l=i.find('.note-dimension-picker-unhighlighted'); if (void 0===t.offsetX) { var c=$(t.target).offset(); n={ x: t.pageX-c.left, y: t.pageY-c.top } } else n={ x: t.offsetX, y: t.offsetY }; var d=Math.ceil(n.x/18)||1, u=Math.ceil(n.y/18)||1; s.css({ width: d+'em', height: u+'em' }), a.data('value', d+'x'+u), d>3&&d<e&&l.css({ width: d+1+'em' }), u>3&&u<o&&l.css({ height: u+1+'em' }), r.html(d+' x '+u) }(t, e.col, e.row)) }) } }).render() }, colorDropdownButton: function (c, d) { return h({ className: 'note-color', children: [m({ className: 'note-current-color-button', contents: c.title, tooltip: c.lang.color.recent, click: c.currentClick, callback: function (t) { var e=t.find('.note-recent-color'); d!=='foreColor'&&(e.css('background-color', '#FFFF00'), t.attr('data-backColor', '#FFFF00')) } }), m({ className: 'dropdown-toggle', contents: w('note-icon-caret'), tooltip: c.lang.color.more, data: { toggle: 'dropdown' } }), g({ items: ['<div>', '<div class="note-btn-group btn-background-color">', '  <div class="note-palette-title">'+c.lang.color.background+'</div>', '  <div>', '<button type="button" class="note-color-reset note-btn note-btn-block"  data-event="backColor" data-value="inherit">', c.lang.color.transparent, '    </button>', '  </div>', '  <div class="note-holder" data-event="backColor"/>', '  <div class="btn-sm">', '    <input type="color" id="html5bcp" class="note-btn btn-default" value="#21104A" style="width:100%;" data-value="cp">', '    <button type="button" class="note-color-reset btn" data-event="backColor" data-value="cpbackColor">', c.lang.color.cpSelect, '    </button>', '  </div>', '</div>', '<div class="note-btn-group btn-foreground-color">', '  <div class="note-palette-title">'+c.lang.color.foreground+'</div>', '  <div>', '<button type="button" class="note-color-reset note-btn note-btn-block"  data-event="removeFormat" data-value="foreColor">', c.lang.color.resetToDefault, '    </button>', '  </div>', '  <div class="note-holder" data-event="foreColor"/>', '  <div class="btn-sm">', '    <input type="color" id="html5fcp" class="note-btn btn-default" value="#21104A" style="width:100%;" data-value="cp">', '    <button type="button" class="note-color-reset btn" data-event="foreColor" data-value="cpforeColor">', c.lang.color.cpSelect, '    </button>', '  </div>', '</div>', '</div>'].join(''), callback: function (t) { t.find('.note-holder').each(function () { var t=$(this); t.append(b({ colors: c.colors, eventName: t.data('event') }).render()) }), d==='fore'?(t.find('.btn-background-color').hide(), t.css({ 'min-width': '210px' })):d==='back'&&(t.find('.btn-foreground-color').hide(), t.css({ 'min-width': '210px' })) }, click: function (t) { var e=$(t.target), o=e.data('event'), n=e.data('value'), i=document.getElementById('html5fcp').value, r=document.getElementById('html5bcp').value; if (n==='cp'?t.stopPropagation():n==='cpbackColor'?n=r:n==='cpforeColor'&&(n=i), o&&n) { var a=o==='backColor'?'background-color':'color', s=e.closest('.note-color').find('.note-recent-color'), l=e.closest('.note-color').find('.note-current-color-button'); s.css(a, n), l.attr('data-'+o, n), d==='fore'?c.itemClick('foreColor', n):d==='back'?c.itemClick('backColor', n):c.itemClick(o, n) } } })] }).render() }, palette: b, dialog: y, videoDialog: function (t) { var e='<div class="note-form-group"><label class="note-form-label">'+t.lang.video.url+' <small class="text-muted">'+t.lang.video.providers+'</small></label><input class="note-video-url note-input" type="text" /></div>', o=['<button type="button" href="#" class="note-btn note-btn-primary note-video-btn disabled" disabled>', t.lang.video.insert, '</button>'].join(''); return y({ title: t.lang.video.insert, fade: t.fade, body: e, footer: o }).render() }, imageDialog: function (t) { var e='<div class="note-form-group note-group-select-from-files"><label class="note-form-label">'+t.lang.image.selectFromFiles+'</label><input class="note-note-image-input note-input" type="file" name="files" accept="image/*" multiple="multiple" />'+t.imageLimitation+'</div><div class="note-form-group" style="overflow:auto;"><label class="note-form-label">'+t.lang.image.url+'</label><input class="note-image-url note-input" type="text" /></div>', o=['<button href="#" type="button" class="note-btn note-btn-primary note-btn-large note-image-btn disabled" disabled>', t.lang.image.insert, '</button>'].join(''); return y({ title: t.lang.image.insert, fade: t.fade, body: e, footer: o }).render() }, linkDialog: function (t) { var e='<div class="note-form-group"><label class="note-form-label">'+t.lang.link.textToDisplay+'</label><input class="note-link-text note-input" type="text" /></div><div class="note-form-group"><label class="note-form-label">'+t.lang.link.url+'</label><input class="note-link-url note-input" type="text" value="http://" /></div>'+(t.disableLinkTarget?'':'<div class="checkbox"><label><input type="checkbox" checked> '+t.lang.link.openInNewWindow+'</label></div>'), o=['<button href="#" type="button" class="note-btn note-btn-primary note-link-btn disabled" disabled>', t.lang.link.insert, '</button>'].join(''); return y({ className: 'link-dialog', title: t.lang.link.insert, fade: t.fade, body: e, footer: o }).render() }, popover: C, checkbox: k, icon: w, toggleBtn: function (t, e) { t.toggleClass('disabled', !e), t.attr('disabled', !e) }, toggleBtnActive: function (t, e) { t.toggleClass('active', e) }, check: function (t, e) { t.find('.checked').removeClass('checked'), t.find('[data-value="'+e+'"]').addClass('checked') }, onDialogShown: function (t, e) { t.one('note.modal.show', e) }, onDialogHidden: function (t, e) { t.one('note.modal.hide', e) }, showDialog: function (t) { t.data('modal').show() }, hideDialog: function (t) { t.data('modal').hide() }, getPopoverContent: function (t) { return t.find('.note-popover-content') }, getDialogBody: function (t) { return t.find('.note-modal-body') }, createLayout: function (t, e) { var o=(e.airMode?x.airEditor([x.editingArea([x.airEditable()])]):x.editor([x.toolbar(), x.editingArea([x.codable(), x.editable()]), x.statusbar()])).render(); return o.insertAfter(t), { note: t, editor: o, toolbar: o.find('.note-toolbar'), editingArea: o.find('.note-editing-area'), editable: o.find('.note-editable'), codable: o.find('.note-codable'), statusbar: o.find('.note-statusbar') } }, removeLayout: function (t, e) { t.html(e.editable.html()), e.editor.remove(), t.off('summernote'), t.show() } }; f.summernote=f.summernote||{ lang: {} }, f.extend(f.summernote.lang, { 'en-US': { font: { bold: 'Bold', italic: 'Italic', underline: 'Underline', clear: 'Remove Font Style', height: 'Line Height', name: 'Font Family', strikethrough: 'Strikethrough', subscript: 'Subscript', superscript: 'Superscript', size: 'Font Size' }, image: { image: 'Picture', insert: 'Insert Image', resizeFull: 'Resize Full', resizeHalf: 'Resize Half', resizeQuarter: 'Resize Quarter', floatLeft: 'Float Left', floatRight: 'Float Right', floatNone: 'Float None', shapeRounded: 'Shape: Rounded', shapeCircle: 'Shape: Circle', shapeThumbnail: 'Shape: Thumbnail', shapeNone: 'Shape: None', dragImageHere: 'Drag image or text here', dropImage: 'Drop image or Text', selectFromFiles: 'Select from files', maximumFileSize: 'Maximum file size', maximumFileSizeError: 'Maximum file size exceeded.', url: 'Image URL', remove: 'Remove Image', original: 'Original' }, video: { video: 'Video', videoLink: 'Video Link', insert: 'Insert Video', url: 'Video URL', providers: '(YouTube, Vimeo, Vine, Instagram, DailyMotion or Youku)' }, link: { link: 'Link', insert: 'Insert Link', unlink: 'Unlink', edit: 'Edit', textToDisplay: 'Text to display', url: 'To what URL should this link go?', openInNewWindow: 'Open in new window' }, table: { table: 'Table', addRowAbove: 'Add row above', addRowBelow: 'Add row below', addColLeft: 'Add column left', addColRight: 'Add column right', delRow: 'Delete row', delCol: 'Delete column', delTable: 'Delete table' }, hr: { insert: 'Insert Horizontal Rule' }, style: { style: 'Style', p: 'Normal', blockquote: 'Quote', pre: 'Code', h1: 'Header 1', h2: 'Header 2', h3: 'Header 3', h4: 'Header 4', h5: 'Header 5', h6: 'Header 6' }, lists: { unordered: 'Unordered list', ordered: 'Ordered list' }, options: { help: 'Help', fullscreen: 'Full Screen', codeview: 'Code View' }, paragraph: { paragraph: 'Paragraph', outdent: 'Outdent', indent: 'Indent', left: 'Align left', center: 'Align center', right: 'Align right', justify: 'Justify full' }, color: { recent: 'Recent Color', more: 'More Color', background: 'Background Color', foreground: 'Foreground Color', transparent: 'Transparent', setTransparent: 'Set transparent', reset: 'Reset', resetToDefault: 'Reset to default', cpSelect: 'Select' }, shortcut: { shortcuts: 'Keyboard shortcuts', close: 'Close', textFormatting: 'Text formatting', action: 'Action', paragraphFormatting: 'Paragraph formatting', documentStyle: 'Document Style', extraKeys: 'Extra keys' }, help: { insertParagraph: 'Insert Paragraph', undo: 'Undoes the last command', redo: 'Redoes the last command', tab: 'Tab', untab: 'Untab', bold: 'Set a bold style', italic: 'Set a italic style', underline: 'Set a underline style', strikethrough: 'Set a strikethrough style', removeFormat: 'Clean a style', justifyLeft: 'Set left align', justifyCenter: 'Set center align', justifyRight: 'Set right align', justifyFull: 'Set full align', insertUnorderedList: 'Toggle unordered list', insertOrderedList: 'Toggle ordered list', outdent: 'Outdent on current paragraph', indent: 'Indent on current paragraph', formatPara: "Change current block's format as a paragraph(P tag)", formatH1: "Change current block's format as H1", formatH2: "Change current block's format as H2", formatH3: "Change current block's format as H3", formatH4: "Change current block's format as H4", formatH5: "Change current block's format as H5", formatH6: "Change current block's format as H6", insertHorizontalRule: 'Insert horizontal rule', 'linkDialog.show': 'Show Link Dialog' }, history: { undo: 'Undo', redo: 'Redo' }, specialChar: { specialChar: 'SPECIAL CHARACTERS', select: 'Select Special characters' } } }); var S=typeof define==='function'&&define.amd; var N, T=navigator.userAgent, A=/MSIE|Trident/i.test(T); if (A) { var I=/MSIE (\d+[.]\d+)/.exec(T); I&&(N=parseFloat(I[1])), (I=/Trident\/.*rv:([0-9]{1,}[.0-9]{0,})/.exec(T))&&(N=parseFloat(I[1])) } var E=/Edge\/\d+/.test(T), F=!!window.CodeMirror; if (!F&&S) if (typeof __webpack_require__==='function') try { require.resolve('codemirror'), F=!0 } catch (t) {} else if (typeof require!=='undefined') if (void 0!==require.resolve) try { require.resolve('codemirror'), F=!0 } catch (t) {} else void 0!==require.specified&&(F=require.specified('codemirror')); var P='ontouchstart'in window||navigator.MaxTouchPoints>0||navigator.msMaxTouchPoints>0, R=A||E?'DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted':'input', L={ isMac: navigator.appVersion.indexOf('Mac')>-1, isMSIE: A, isEdge: E, isFF: !E&&/firefox/i.test(T), isPhantom: /PhantomJS/i.test(T), isWebkit: !E&&/webkit/i.test(T), isChrome: !E&&/chrome/i.test(T), isSafari: !E&&/safari/i.test(T), browserVersion: N, jqueryVersion: parseFloat(f.fn.jquery), isSupportAmd: S, isSupportTouch: P, hasCodeMirror: F, isFontInstalled: function (t) { var e=t==='Comic Sans MS'?'Courier New':'Comic Sans MS', o=f('<div>').css({ position: 'absolute', left: '-9999px', top: '-9999px', fontSize: '200px' }).text('mmmmmmmmmwwwwwww').appendTo(document.body), n=o.css('fontFamily', e).width(), i=o.css('fontFamily', t+','+e).width(); return o.remove(), n!==i }, isW3CRangeSupport: !!document.createRange, inputEventName: R }; var H=0; var B={ eq: function (e) { return function (t) { return e===t } }, eq2: function (t, e) { return t===e }, peq2: function (o) { return function (t, e) { return t[o]===e[o] } }, ok: function () { return !0 }, fail: function () { return !1 }, self: function (t) { return t }, not: function (t) { return function () { return !t.apply(t, arguments) } }, and: function (e, o) { return function (t) { return e(t)&&o(t) } }, invoke: function (t, e) { return function () { return t[e].apply(t, arguments) } }, uniqueId: function (t) { var e=++H+''; return t?t+e:e }, rect2bnd: function (t) { var e=$(document); return { top: t.top+e.scrollTop(), left: t.left+e.scrollLeft(), width: t.right-t.left, height: t.bottom-t.top } }, invertObject: function (t) { var e={}; for (var o in t)t.hasOwnProperty(o)&&(e[t[o]]=o); return e }, namespaceToCamel: function (t, e) { return (e=e||'')+t.split('.').map(function (t) { return t.substring(0, 1).toUpperCase()+t.substring(1) }).join('') }, debounce: function (n, i, r) { var a, s=this; return function () { var t=s, e=arguments, o=r&&!a; clearTimeout(a), a=setTimeout(function () { a=null, r||n.apply(t, e) }, i), o&&n.apply(t, e) } } }; function M (t) { return t[0] } function D (t) { return t[t.length-1] } function z (t) { return t.slice(1) } function O (t, e) { return f.inArray(e, t) } function U (t, e) { return O(t, e)!==-1 } var j={ head: M, last: D, initial: function (t) { return t.slice(0, t.length-1) }, tail: z, prev: function (t, e) { var o=O(t, e); return o===-1?null:t[o-1] }, next: function (t, e) { var o=O(t, e); return o===-1?null:t[o+1] }, find: function (t, e) { for (var o=0, n=t.length; o<n; o++) { var i=t[o]; if (e(i)) return i } }, contains: U, all: function (t, e) { for (var o=0, n=t.length; o<n; o++) if (!e(t[o])) return !1; return !0 }, sum: function (t, o) { return o=o||B.self, t.reduce(function (t, e) { return t+o(e) }, 0) }, from: function (t) { for (var e=[], o=t.length, n=-1; ++n<o;)e[n]=t[n]; return e }, isEmpty: function (t) { return !t||!t.length }, clusterBy: function (t, n) { return t.length?z(t).reduce(function (t, e) { var o=D(t); return n(D(o), e)?o[o.length]=e:t[t.length]=[e], t }, [[M(t)]]):[] }, compact: function (t) { for (var e=[], o=0, n=t.length; o<n; o++)t[o]&&e.push(t[o]); return e }, unique: function (t) { for (var e=[], o=0, n=t.length; o<n; o++)U(e, t[o])||e.push(t[o]); return e } }, V={ BACKSPACE: 8, TAB: 9, ENTER: 13, SPACE: 32, DELETE: 46, LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40, NUM0: 48, NUM1: 49, NUM2: 50, NUM3: 51, NUM4: 52, NUM5: 53, NUM6: 54, NUM7: 55, NUM8: 56, A: 65, B: 66, C: 67, D: 68, E: 69, F: 70, G: 71, H: 72, I: 73, J: 74, K: 75, L: 76, M: 77, N: 78, O: 79, P: 80, Q: 81, R: 82, S: 83, T: 84, U: 85, V: 86, W: 87, X: 88, Y: 89, Z: 90, SLASH: 191, LEFTBRACKET: 219, BACKSLASH: 220, RIGHTBRACKET: 221 }, q={ isEdit: function (t) { return j.contains([V.BACKSPACE, V.TAB, V.ENTER, V.SPACE, V.DELETE], t) }, isMove: function (t) { return j.contains([V.LEFT, V.UP, V.RIGHT, V.DOWN], t) }, nameFromCode: B.invertObject(V), code: V }, K=String.fromCharCode(160); function W (t) { return t&&f(t).hasClass('note-editable') } function G (e) { return e=e.toUpperCase(), function (t) { return t&&t.nodeName.toUpperCase()===e } } function _ (t) { return t&&t.nodeType===3 } function Y (t) { return t&&/^BR|^IMG|^HR|^IFRAME|^BUTTON|^INPUT/.test(t.nodeName.toUpperCase()) } function Z (t) { return !W(t)&&(t&&/^DIV|^P|^LI|^H[1-7]/.test(t.nodeName.toUpperCase())) } var Q=G('PRE'), X=G('LI'); var J=G('TABLE'), tt=G('DATA'); function et (t) { return !(at(t)||ot(t)||nt(t)||Z(t)||J(t)||rt(t)||tt(t)) } function ot (t) { return t&&/^UL|^OL/.test(t.nodeName.toUpperCase()) } var nt=G('HR'); function it (t) { return t&&/^TD|^TH/.test(t.nodeName.toUpperCase()) } var rt=G('BLOCKQUOTE'); function at (t) { return it(t)||rt(t)||W(t) } var st=G('A'); var lt=G('BODY'); var ct=L.isMSIE&&L.browserVersion<11?'&nbsp;':'<br>'; function dt (t) { return _(t)?t.nodeValue.length:t?t.childNodes.length:0 } function ut (t) { var e=dt(t); return e===0||(!_(t)&&e===1&&t.innerHTML===ct||!(!j.all(t.childNodes, _)||t.innerHTML!=='')) } function ht (t) { Y(t)||dt(t)||(t.innerHTML=ct) } function pt (t, e) { for (;t;) { if (e(t)) return t; if (W(t)) break; t=t.parentNode } return null } function ft (t, e) { e=e||B.fail; var o=[]; return pt(t, function (t) { return W(t)||o.push(t), e(t) }), o } function mt (t, e) { e=e||B.fail; for (var o=[]; t&&!e(t);)o.push(t), t=t.nextSibling; return o } function gt (t, e) { var o=e.nextSibling, n=e.parentNode; return o?n.insertBefore(t, o):n.appendChild(t), t } function vt (o, t) { return f.each(t, function (t, e) { o.appendChild(e) }), o } function bt (t) { return t.offset===0 } function yt (t) { return t.offset===dt(t.node) } function Ct (t) { return bt(t)||yt(t) } function kt (t, e) { for (;t&&t!==e;) { if (xt(t)!==0) return !1; t=t.parentNode } return !0 } function wt (t, e) { if (!e) return !1; for (;t&&t!==e;) { if (xt(t)!==dt(t.parentNode)-1) return !1; t=t.parentNode } return !0 } function xt (t) { for (var e=0; t=t.previousSibling;)e+=1; return e } function St (t) { return !!(t&&t.childNodes&&t.childNodes.length) } function Nt (t, e) { var o, n; if (t.offset===0) { if (W(t.node)) return null; o=t.node.parentNode, n=xt(t.node) } else St(t.node)?n=dt(o=t.node.childNodes[t.offset-1]):(o=t.node, n=e?0:t.offset-1); return { node: o, offset: n } } function Tt (t, e) { var o, n; if (dt(t.node)===t.offset) { if (W(t.node)) return null; o=t.node.parentNode, n=xt(t.node)+1 } else St(t.node)?(o=t.node.childNodes[t.offset], n=0):(o=t.node, n=e?dt(t.node):t.offset+1); return { node: o, offset: n } } function At (t, e) { return t.node===e.node&&t.offset===e.offset } function It (t, e) { var o=e&&e.isSkipPaddingBlankHTML, n=e&&e.isNotSplitEdgePoint; if (Ct(t)&&(_(t.node)||n)) { if (bt(t)) return t.node; if (yt(t)) return t.node.nextSibling } if (_(t.node)) return t.node.splitText(t.offset); var i=t.node.childNodes[t.offset], r=gt(t.node.cloneNode(!1), t.node); return vt(r, mt(i)), o||(ht(t.node), ht(r)), r } function Et (t, o, n) { var e=ft(o.node, B.eq(t)); return e.length?e.length===1?It(o, n):e.reduce(function (t, e) { return t===o.node&&(t=It(o, n)), It({ node: e, offset: t?xt(t):dt(e) }, n) }):null } function Ft (t) { return document.createElement(t) } function Pt (t, e) { if (t&&t.parentNode) { if (t.removeNode) return t.removeNode(e); var o=t.parentNode; if (!e) { for (var n=[], i=0, r=t.childNodes.length; i<r; i++)n.push(t.childNodes[i]); for (i=0, r=n.length; i<r; i++)o.insertBefore(n[i], t) }o.removeChild(t) } } var Rt=G('TEXTAREA'); function Lt (t, e) { var o=Rt(t[0])?t.val():t.html(); return e?o.replace(/[\n\r]/g, ''):o } var $t={ NBSP_CHAR: K, ZERO_WIDTH_NBSP_CHAR: '\ufeff', blank: ct, emptyPara: '<p>'+ct+'</p>', makePredByNodeName: G, isEditable: W, isControlSizing: function (t) { return t&&f(t).hasClass('note-control-sizing') }, isText: _, isElement: function (t) { return t&&t.nodeType===1 }, isVoid: Y, isPara: Z, isPurePara: function (t) { return Z(t)&&!X(t) }, isHeading: function (t) { return t&&/^H[1-7]/.test(t.nodeName.toUpperCase()) }, isInline: et, isBlock: B.not(et), isBodyInline: function (t) { return et(t)&&!pt(t, Z) }, isBody: lt, isParaInline: function (t) { return et(t)&&!!pt(t, Z) }, isPre: Q, isList: ot, isTable: J, isData: tt, isCell: it, isBlockquote: rt, isBodyContainer: at, isAnchor: st, isDiv: G('DIV'), isLi: X, isBR: G('BR'), isSpan: G('SPAN'), isB: G('B'), isU: G('U'), isS: G('S'), isI: G('I'), isImg: G('IMG'), isTextarea: Rt, isEmpty: ut, isEmptyAnchor: B.and(st, ut), isClosestSibling: function (t, e) { return t.nextSibling===e||t.previousSibling===e }, withClosestSiblings: function (t, e) { e=e||B.ok; var o=[]; return t.previousSibling&&e(t.previousSibling)&&o.push(t.previousSibling), o.push(t), t.nextSibling&&e(t.nextSibling)&&o.push(t.nextSibling), o }, nodeLength: dt, isLeftEdgePoint: bt, isRightEdgePoint: yt, isEdgePoint: Ct, isLeftEdgeOf: kt, isRightEdgeOf: wt, isLeftEdgePointOf: function (t, e) { return bt(t)&&kt(t.node, e) }, isRightEdgePointOf: function (t, e) { return yt(t)&&wt(t.node, e) }, prevPoint: Nt, nextPoint: Tt, isSamePoint: At, isVisiblePoint: function (t) { if (_(t.node)||!St(t.node)||ut(t.node)) return !0; var e=t.node.childNodes[t.offset-1], o=t.node.childNodes[t.offset]; return !(e&&!Y(e)||o&&!Y(o)) }, prevPointUntil: function (t, e) { for (;t;) { if (e(t)) return t; t=Nt(t) } return null }, nextPointUntil: function (t, e) { for (;t;) { if (e(t)) return t; t=Tt(t) } return null }, isCharPoint: function (t) { if (!_(t.node)) return !1; var e=t.node.nodeValue.charAt(t.offset-1); return e&&e!==' '&&e!==K }, walkPoint: function (t, e, o, n) { for (var i=t; i&&(o(i), !At(i, e));)i=Tt(i, n&&t.node!==i.node&&e.node!==i.node) }, ancestor: pt, singleChildAncestor: function (t, e) { for (t=t.parentNode; t&&dt(t)===1;) { if (e(t)) return t; if (W(t)) break; t=t.parentNode } return null }, listAncestor: ft, lastAncestor: function (t, e) { var o=ft(t); return j.last(o.filter(e)) }, listNext: mt, listPrev: function (t, e) { e=e||B.fail; for (var o=[]; t&&!e(t);)o.push(t), t=t.previousSibling; return o }, listDescendant: function (i, r) { var a=[]; return r=r||B.ok, (function t (e) { i!==e&&r(e)&&a.push(e); for (var o=0, n=e.childNodes.length; o<n; o++)t(e.childNodes[o]) }(i)), a }, commonAncestor: function (t, e) { for (var o=ft(t), n=e; n; n=n.parentNode) if (f.inArray(n, o)>-1) return n; return null }, wrap: function (t, e) { var o=t.parentNode, n=f('<'+e+'>')[0]; return o.insertBefore(n, t), n.appendChild(t), n }, insertAfter: gt, appendChildNodes: vt, position: xt, hasChildren: St, makeOffsetPath: function (t, e) { return ft(e, B.eq(t)).map(xt).reverse() }, fromOffsetPath: function (t, e) { for (var o=t, n=0, i=e.length; n<i; n++)o=o.childNodes.length<=e[n]?o.childNodes[o.childNodes.length-1]:o.childNodes[e[n]]; return o }, splitTree: Et, splitPoint: function (t, e) { var o, n, i=e?Z:at, r=ft(t.node, i), a=j.last(r)||t.node; i(a)?(o=r[r.length-2], n=a):n=(o=a).parentNode; var s=o&&Et(o, t, { isSkipPaddingBlankHTML: e, isNotSplitEdgePoint: e }); return s||n!==t.node||(s=t.node.childNodes[t.offset]), { rightNode: s, container: n } }, create: Ft, createText: function (t) { return document.createTextNode(t) }, remove: Pt, removeWhile: function (t, e) { for (;t&&!W(t)&&e(t);) { var o=t.parentNode; Pt(t), t=o } }, replace: function (t, e) { if (t.nodeName.toUpperCase()===e.toUpperCase()) return t; var o=Ft(e); return t.style.cssText&&(o.style.cssText=t.style.cssText), vt(o, j.from(t.childNodes)), gt(o, t), Pt(t), o }, html: function (t, e) { var o=Lt(t); e&&(o=o.replace(/<(\/?)(\b(?!!)[^>\s]*)(.*?)(\s*\/?>)/g, function (t, e, o) { o=o.toUpperCase(); var n=/^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(o)&&!!e, i=/^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(o); return t+(n||i?'\n':'') }), o=f.trim(o)); return o }, value: Lt, posFromPlaceholder: function (t) { var e=f(t), o=e.offset(), n=e.outerHeight(!0); return { left: o.left, top: o.top+n } }, attachEvents: function (e, o) { Object.keys(o).forEach(function (t) { e.on(t, o[t]) }) }, detachEvents: function (e, o) { Object.keys(o).forEach(function (t) { e.off(t, o[t]) }) }, isCustomStyleTag: function (t) { return t&&!_(t)&&j.contains(t.classList, 'note-styletag') } }; function Ht (t, e) { var o, n, i=t.parentElement(), r=document.body.createTextRange(), a=j.from(i.childNodes); for (o=0; o<a.length; o++) if (!$t.isText(a[o])) { if (r.moveToElementText(a[o]), r.compareEndPoints('StartToStart', t)>=0) break; n=a[o] } if (o!==0&&$t.isText(a[o-1])) { var s=document.body.createTextRange(), l=null; s.moveToElementText(n||i), s.collapse(!n), l=n?n.nextSibling:i.firstChild; var c=t.duplicate(); c.setEndPoint('StartToStart', s); for (var d=c.text.replace(/[\r\n]/g, '').length; d>l.nodeValue.length&&l.nextSibling;)d-=l.nodeValue.length, l=l.nextSibling; l.nodeValue; e&&l.nextSibling&&$t.isText(l.nextSibling)&&d===l.nodeValue.length&&(d-=l.nodeValue.length, l=l.nextSibling), i=l, o=d } return { cont: i, offset: o } } function Bt (t) { var a=function (t, e) { var o, n; if ($t.isText(t)) { var i=$t.listPrev(t, B.not($t.isText)), r=j.last(i).previousSibling; o=r||t.parentNode, e+=j.sum(j.tail(i), $t.nodeLength), n=!r } else { if (o=t.childNodes[e]||t, $t.isText(o)) return a(o, 0); e=0, n=!1 } return { node: o, collapseToStart: n, offset: e } }, e=document.body.createTextRange(), o=a(t.node, t.offset); return e.moveToElementText(o.node), e.collapse(o.collapseToStart), e.moveStart('character', o.offset), e } var Mt=(function () { function r (t, e, o, n) { this.sc=t, this.so=e, this.ec=o, this.eo=n, this.isOnEditable=this.makeIsOn($t.isEditable), this.isOnList=this.makeIsOn($t.isList), this.isOnAnchor=this.makeIsOn($t.isAnchor), this.isOnCell=this.makeIsOn($t.isCell), this.isOnData=this.makeIsOn($t.isData) } return r.prototype.nativeRange=function () { if (L.isW3CRangeSupport) { var t=document.createRange(); return t.setStart(this.sc, this.so), t.setEnd(this.ec, this.eo), t } var e=Bt({ node: this.sc, offset: this.so }); return e.setEndPoint('EndToEnd', Bt({ node: this.ec, offset: this.eo })), e }, r.prototype.getPoints=function () { return { sc: this.sc, so: this.so, ec: this.ec, eo: this.eo } }, r.prototype.getStartPoint=function () { return { node: this.sc, offset: this.so } }, r.prototype.getEndPoint=function () { return { node: this.ec, offset: this.eo } }, r.prototype.select=function () { var t=this.nativeRange(); if (L.isW3CRangeSupport) { var e=document.getSelection(); e.rangeCount>0&&e.removeAllRanges(), e.addRange(t) } else t.select(); return this }, r.prototype.scrollIntoView=function (t) { var e=f(t).height(); return t.scrollTop+e<this.sc.offsetTop&&(t.scrollTop+=Math.abs(t.scrollTop+e-this.sc.offsetTop)), this }, r.prototype.normalize=function () { var t=function (t, e) { if ($t.isVisiblePoint(t)&&!$t.isEdgePoint(t)||$t.isVisiblePoint(t)&&$t.isRightEdgePoint(t)&&!e||$t.isVisiblePoint(t)&&$t.isLeftEdgePoint(t)&&e||$t.isVisiblePoint(t)&&$t.isBlock(t.node)&&$t.isEmpty(t.node)) return t; var o=$t.ancestor(t.node, $t.isBlock); if (($t.isLeftEdgePointOf(t, o)||$t.isVoid($t.prevPoint(t).node))&&!e||($t.isRightEdgePointOf(t, o)||$t.isVoid($t.nextPoint(t).node))&&e) { if ($t.isVisiblePoint(t)) return t; e=!e } return (e?$t.nextPointUntil($t.nextPoint(t), $t.isVisiblePoint):$t.prevPointUntil($t.prevPoint(t), $t.isVisiblePoint))||t }, e=t(this.getEndPoint(), !1), o=this.isCollapsed()?e:t(this.getStartPoint(), !0); return new r(o.node, o.offset, e.node, e.offset) }, r.prototype.nodes=function (o, t) { o=o||B.ok; var n=t&&t.includeAncestor, i=t&&t.fullyContains, e=this.getStartPoint(), r=this.getEndPoint(), a=[], s=[]; return $t.walkPoint(e, r, function (t) { var e; $t.isEditable(t.node)||(i?($t.isLeftEdgePoint(t)&&s.push(t.node), $t.isRightEdgePoint(t)&&j.contains(s, t.node)&&(e=t.node)):e=n?$t.ancestor(t.node, o):t.node, e&&o(e)&&a.push(e)) }, !0), j.unique(a) }, r.prototype.commonAncestor=function () { return $t.commonAncestor(this.sc, this.ec) }, r.prototype.expand=function (t) { var e=$t.ancestor(this.sc, t), o=$t.ancestor(this.ec, t); if (!e&&!o) return new r(this.sc, this.so, this.ec, this.eo); var n=this.getPoints(); return e&&(n.sc=e, n.so=0), o&&(n.ec=o, n.eo=$t.nodeLength(o)), new r(n.sc, n.so, n.ec, n.eo) }, r.prototype.collapse=function (t) { return t?new r(this.sc, this.so, this.sc, this.so):new r(this.ec, this.eo, this.ec, this.eo) }, r.prototype.splitText=function () { var t=this.sc===this.ec, e=this.getPoints(); return $t.isText(this.ec)&&!$t.isEdgePoint(this.getEndPoint())&&this.ec.splitText(this.eo), $t.isText(this.sc)&&!$t.isEdgePoint(this.getStartPoint())&&(e.sc=this.sc.splitText(this.so), e.so=0, t&&(e.ec=e.sc, e.eo=this.eo-this.so)), new r(e.sc, e.so, e.ec, e.eo) }, r.prototype.deleteContents=function () { if (this.isCollapsed()) return this; var t=this.splitText(), e=t.nodes(null, { fullyContains: !0 }), n=$t.prevPointUntil(t.getStartPoint(), function (t) { return !j.contains(e, t.node) }), i=[]; return f.each(e, function (t, e) { var o=e.parentNode; n.node!==o&&$t.nodeLength(o)===1&&i.push(o), $t.remove(e, !1) }), f.each(i, function (t, e) { $t.remove(e, !1) }), new r(n.node, n.offset, n.node, n.offset).normalize() }, r.prototype.makeIsOn=function (e) { return function () { var t=$t.ancestor(this.sc, e); return !!t&&t===$t.ancestor(this.ec, e) } }, r.prototype.isLeftEdgeOf=function (t) { if (!$t.isLeftEdgePoint(this.getStartPoint())) return !1; var e=$t.ancestor(this.sc, t); return e&&$t.isLeftEdgeOf(this.sc, e) }, r.prototype.isCollapsed=function () { return this.sc===this.ec&&this.so===this.eo }, r.prototype.wrapBodyInlineWithPara=function () { if ($t.isBodyContainer(this.sc)&&$t.isEmpty(this.sc)) return this.sc.innerHTML=$t.emptyPara, new r(this.sc.firstChild, 0, this.sc.firstChild, 0); var t, e=this.normalize(); if ($t.isParaInline(this.sc)||$t.isPara(this.sc)) return e; if ($t.isInline(e.sc)) { var o=$t.listAncestor(e.sc, B.not($t.isInline)); t=j.last(o), $t.isInline(t)||(t=o[o.length-2]||e.sc.childNodes[e.so]) } else t=e.sc.childNodes[e.so>0?e.so-1:0]; var n=$t.listPrev(t, $t.isParaInline).reverse(); if ((n=n.concat($t.listNext(t.nextSibling, $t.isParaInline))).length) { var i=$t.wrap(j.head(n), 'p'); $t.appendChildNodes(i, j.tail(n)) } return this.normalize() }, r.prototype.insertNode=function (t) { var e=this.wrapBodyInlineWithPara().deleteContents(), o=$t.splitPoint(e.getStartPoint(), $t.isInline(t)); return o.rightNode?o.rightNode.parentNode.insertBefore(t, o.rightNode):o.container.appendChild(t), t }, r.prototype.pasteHTML=function (t) { var e=f('<div></div>').html(t)[0], o=j.from(e.childNodes), n=this.wrapBodyInlineWithPara().deleteContents(); return n.so>0&&(o=o.reverse()), o=o.map(function (t) { return n.insertNode(t) }), n.so>0&&(o=o.reverse()), o }, r.prototype.toString=function () { var t=this.nativeRange(); return L.isW3CRangeSupport?t.toString():t.text }, r.prototype.getWordRange=function (t) { var e=this.getEndPoint(); if (!$t.isCharPoint(e)) return this; var o=$t.prevPointUntil(e, function (t) { return !$t.isCharPoint(t) }); return t&&(e=$t.nextPointUntil(e, function (t) { return !$t.isCharPoint(t) })), new r(o.node, o.offset, e.node, e.offset) }, r.prototype.bookmark=function (t) { return { s: { path: $t.makeOffsetPath(t, this.sc), offset: this.so }, e: { path: $t.makeOffsetPath(t, this.ec), offset: this.eo } } }, r.prototype.paraBookmark=function (t) { return { s: { path: j.tail($t.makeOffsetPath(j.head(t), this.sc)), offset: this.so }, e: { path: j.tail($t.makeOffsetPath(j.last(t), this.ec)), offset: this.eo } } }, r.prototype.getClientRects=function () { return this.nativeRange().getClientRects() }, r }()), Dt={ create: function (t, e, o, n) { if (arguments.length===4) return new Mt(t, e, o, n); if (arguments.length===2) return new Mt(o=t, n=e, o, n); var i=this.createFromSelection(); return i||arguments.length!==1?i:(i=this.createFromNode(t)).collapse($t.emptyPara===t.innerHTML) }, createFromSelection: function () { var t, e, o, n; if (L.isW3CRangeSupport) { var i=document.getSelection(); if (!i||i.rangeCount===0) return null; if ($t.isBody(i.anchorNode)) return null; var r=i.getRangeAt(0); t=r.startContainer, e=r.startOffset, o=r.endContainer, n=r.endOffset } else { var a=document.selection.createRange(), s=a.duplicate(); s.collapse(!1); var l=a; l.collapse(!0); var c=Ht(l, !0), d=Ht(s, !1); $t.isText(c.node)&&$t.isLeftEdgePoint(c)&&$t.isTextNode(d.node)&&$t.isRightEdgePoint(d)&&d.node.nextSibling===c.node&&(c=d), t=c.cont, e=c.offset, o=d.cont, n=d.offset } return new Mt(t, e, o, n) }, createFromNode: function (t) { var e=t, o=0, n=t, i=$t.nodeLength(n); return $t.isVoid(e)&&(o=$t.listPrev(e).length-1, e=e.parentNode), $t.isBR(n)?(i=$t.listPrev(n).length-1, n=n.parentNode):$t.isVoid(n)&&(i=$t.listPrev(n).length, n=n.parentNode), this.create(e, o, n, i) }, createFromNodeBefore: function (t) { return this.createFromNode(t).collapse(!0) }, createFromNodeAfter: function (t) { return this.createFromNode(t).collapse() }, createFromBookmark: function (t, e) { var o=$t.fromOffsetPath(t, e.s.path), n=e.s.offset, i=$t.fromOffsetPath(t, e.e.path), r=e.e.offset; return new Mt(o, n, i, r) }, createFromParaBookmark: function (t, e) { var o=t.s.offset, n=t.e.offset, i=$t.fromOffsetPath(j.head(e), t.s.path), r=$t.fromOffsetPath(j.last(e), t.e.path); return new Mt(i, o, r, n) } }; var zt=(function () { function t (t) { this.stack=[], this.stackOffset=-1, this.$editable=t, this.editable=t[0] } return t.prototype.makeSnapshot=function () { var t=Dt.create(this.editable); return { contents: this.$editable.html(), bookmark: t?t.bookmark(this.editable):{ s: { path: [], offset: 0 }, e: { path: [], offset: 0 } } } }, t.prototype.applySnapshot=function (t) { t.contents!==null&&this.$editable.html(t.contents), t.bookmark!==null&&Dt.createFromBookmark(this.editable, t.bookmark).select() }, t.prototype.rewind=function () { this.$editable.html()!==this.stack[this.stackOffset].contents&&this.recordUndo(), this.stackOffset=0, this.applySnapshot(this.stack[this.stackOffset]) }, t.prototype.reset=function () { this.stack=[], this.stackOffset=-1, this.$editable.html(''), this.recordUndo() }, t.prototype.undo=function () { this.$editable.html()!==this.stack[this.stackOffset].contents&&this.recordUndo(), this.stackOffset>0&&(this.stackOffset--, this.applySnapshot(this.stack[this.stackOffset])) }, t.prototype.redo=function () { this.stack.length-1> this.stackOffset&&(this.stackOffset++, this.applySnapshot(this.stack[this.stackOffset])) }, t.prototype.recordUndo=function () { this.stackOffset++, this.stack.length> this.stackOffset&&(this.stack=this.stack.slice(0, this.stackOffset)), this.stack.push(this.makeSnapshot()) }, t }()), Ot=(function () { function t () {} return t.prototype.jQueryCSS=function (o, t) { if (L.jqueryVersion<1.9) { var n={}; return f.each(t, function (t, e) { n[e]=o.css(e) }), n } return o.css(t) }, t.prototype.fromNode=function (t) { var e=this.jQueryCSS(t, ['font-family', 'font-size', 'text-align', 'list-style-type', 'line-height'])||{}; return e['font-size']=parseInt(e['font-size'], 10), e }, t.prototype.stylePara=function (t, o) { f.each(t.nodes($t.isPara, { includeAncestor: !0 }), function (t, e) { f(e).css(o) }) }, t.prototype.styleNodes=function (t, e) { t=t.splitText(); var o=e&&e.nodeName||'SPAN', n=!(!e||!e.expandClosestSibling), i=!(!e||!e.onlyPartialContains); if (t.isCollapsed()) return [t.insertNode($t.create(o))]; var r=$t.makePredByNodeName(o), a=t.nodes($t.isText, { fullyContains: !0 }).map(function (t) { return $t.singleChildAncestor(t, r)||$t.wrap(t, o) }); if (n) { if (i) { var s=t.nodes(); r=B.and(r, function (t) { return j.contains(s, t) }) } return a.map(function (t) { var e=$t.withClosestSiblings(t, r), o=j.head(e), n=j.tail(e); return f.each(n, function (t, e) { $t.appendChildNodes(o, e.childNodes), $t.remove(e) }), j.head(e) }) } return a }, t.prototype.current=function (t) { var e=f($t.isElement(t.sc)?t.sc:t.sc.parentNode), o=this.fromNode(e); try { o=f.extend(o, { 'font-bold': document.queryCommandState('bold')?'bold':'normal', 'font-italic': document.queryCommandState('italic')?'italic':'normal', 'font-underline': document.queryCommandState('underline')?'underline':'normal', 'font-subscript': document.queryCommandState('subscript')?'subscript':'normal', 'font-superscript': document.queryCommandState('superscript')?'superscript':'normal', 'font-strikethrough': document.queryCommandState('strikethrough')?'strikethrough':'normal', 'font-family': document.queryCommandValue('fontname')||o['font-family'] }) } catch (t) {} if (t.isOnList()) { var n=f.inArray(o['list-style-type'], ['circle', 'disc', 'disc-leading-zero', 'square'])>-1; o['list-style']=n?'unordered':'ordered' } else o['list-style']='none'; var i=$t.ancestor(t.sc, $t.isPara); if (i&&i.style['line-height'])o['line-height']=i.style.lineHeight; else { var r=parseInt(o['line-height'], 10)/parseInt(o['font-size'], 10); o['line-height']=r.toFixed(1) } return o.anchor=t.isOnAnchor()&&$t.ancestor(t.sc, $t.isAnchor), o.ancestors=$t.listAncestor(t.sc, $t.isEditable), o.range=t, o }, t }()), Ut=(function () { function t () {} return t.prototype.insertOrderedList=function (t) { this.toggleList('OL', t) }, t.prototype.insertUnorderedList=function (t) { this.toggleList('UL', t) }, t.prototype.indent=function (t) { var n=this, e=Dt.create(t).wrapBodyInlineWithPara(), o=e.nodes($t.isPara, { includeAncestor: !0 }), i=j.clusterBy(o, B.peq2('parentNode')); f.each(i, function (t, e) { var o=j.head(e); $t.isLi(o)?n.wrapList(e, o.parentNode.nodeName):f.each(e, function (t, e) { f(e).css('marginLeft', function (t, e) { return (parseInt(e, 10)||0)+25 }) }) }), e.select() }, t.prototype.outdent=function (t) { var n=this, e=Dt.create(t).wrapBodyInlineWithPara(), o=e.nodes($t.isPara, { includeAncestor: !0 }), i=j.clusterBy(o, B.peq2('parentNode')); f.each(i, function (t, e) { var o=j.head(e); $t.isLi(o)?n.releaseList([e]):f.each(e, function (t, e) { f(e).css('marginLeft', function (t, e) { return (e=parseInt(e, 10)||0)>25?e-25:'' }) }) }), e.select() }, t.prototype.toggleList=function (o, t) { var n=this, e=Dt.create(t).wrapBodyInlineWithPara(), i=e.nodes($t.isPara, { includeAncestor: !0 }), r=e.paraBookmark(i), a=j.clusterBy(i, B.peq2('parentNode')); if (j.find(i, $t.isPurePara)) { var s=[]; f.each(a, function (t, e) { s=s.concat(n.wrapList(e, o)) }), i=s } else { var l=e.nodes($t.isList, { includeAncestor: !0 }).filter(function (t) { return !f.nodeName(t, o) }); l.length?f.each(l, function (t, e) { $t.replace(e, o) }):i=this.releaseList(a, !0) }Dt.createFromParaBookmark(r, i).select() }, t.prototype.wrapList=function (t, e) { var o=j.head(t), n=j.last(t), i=$t.isList(o.previousSibling)&&o.previousSibling, r=$t.isList(n.nextSibling)&&n.nextSibling, a=i||$t.insertAfter($t.create(e||'UL'), n); return t=t.map(function (t) { return $t.isPurePara(t)?$t.replace(t, 'LI'):t }), $t.appendChildNodes(a, t), r&&($t.appendChildNodes(a, j.from(r.childNodes)), $t.remove(r)), t }, t.prototype.releaseList=function (t, l) { var c=[]; return f.each(t, function (t, e) { var o=j.head(e), n=j.last(e), i=l?$t.lastAncestor(o, $t.isList):o.parentNode, r=i.childNodes.length>1?$t.splitTree(i, { node: n.parentNode, offset: $t.position(n)+1 }, { isSkipPaddingBlankHTML: !0 }):null, a=$t.splitTree(i, { node: o.parentNode, offset: $t.position(o) }, { isSkipPaddingBlankHTML: !0 }); e=l?$t.listDescendant(a, $t.isLi):j.from(a.childNodes).filter($t.isLi), !l&&$t.isList(i.parentNode)||(e=e.map(function (t) { return $t.replace(t, 'P') })), f.each(j.from(e).reverse(), function (t, e) { $t.insertAfter(e, i) }); var s=j.compact([i, a, r]); f.each(s, function (t, e) { var o=[e].concat($t.listDescendant(e, $t.isList)); f.each(o.reverse(), function (t, e) { $t.nodeLength(e)||$t.remove(e, !0) }) }), c=c.concat(e) }), c }, t }()), jt=(function () { function t () { this.bullet=new Ut() } return t.prototype.insertTab=function (t, e) { var o=$t.createText(new Array(e+1).join($t.NBSP_CHAR)); (t=t.deleteContents()).insertNode(o, !0), (t=Dt.create(o, e)).select() }, t.prototype.insertParagraph=function (t) { var e=Dt.create(t); e=(e=e.deleteContents()).wrapBodyInlineWithPara(); var o, n=$t.ancestor(e.sc, $t.isPara); if (n) { if ($t.isEmpty(n)&&$t.isLi(n)) return void this.bullet.toggleList(n.parentNode.nodeName); if ($t.isEmpty(n)&&$t.isPara(n)&&$t.isBlockquote(n.parentNode))$t.insertAfter(n, n.parentNode), o=n; else { o=$t.splitTree(n, e.getStartPoint()); var i=$t.listDescendant(n, $t.isEmptyAnchor); i=i.concat($t.listDescendant(o, $t.isEmptyAnchor)), f.each(i, function (t, e) { $t.remove(e) }), ($t.isHeading(o)||$t.isPre(o)||$t.isCustomStyleTag(o))&&$t.isEmpty(o)&&(o=$t.replace(o, 'p')) } } else { var r=e.sc.childNodes[e.so]; o=f($t.emptyPara)[0], r?e.sc.insertBefore(o, r):e.sc.appendChild(o) }Dt.create(o, 0).normalize().select().scrollIntoView(t) }, t }()), Vt=function (t, h, p, i) { var f={ colPos: 0, rowPos: 0 }, m=[], g=[]; function v (t, e, o, n, i, r, a) { var s={ baseRow: o, baseCell: n, isRowSpan: i, isColSpan: r, isVirtual: a }; m[t]||(m[t]=[]), m[t][e]=s } function b (t, e) { if (!m[t]) return e; if (!m[t][e]) return e; for (var o=e; m[t][o];) if (o++, !m[t][o]) return o } function r (t, e) { var o=b(t.rowIndex, e.cellIndex), n=e.colSpan>1, i=e.rowSpan>1, r=t.rowIndex===f.rowPos&&e.cellIndex===f.colPos; v(t.rowIndex, o, t, e, i, n, !1); var a=e.attributes.rowSpan?parseInt(e.attributes.rowSpan.value, 10):0; if (a>1) for (var s=1; s<a; s++) { var l=t.rowIndex+s; y(l, o, e, r), v(l, o, t, e, !0, n, !0) } var c=e.attributes.colSpan?parseInt(e.attributes.colSpan.value, 10):0; if (c>1) for (var d=1; d<c; d++) { var u=b(t.rowIndex, o+d); y(t.rowIndex, u, e, r), v(t.rowIndex, u, t, e, i, !0, !0) } } function y (t, e, o, n) { t===f.rowPos&&f.colPos>=o.cellIndex&&o.cellIndex<=e&&!n&&f.colPos++ } function C (t) { switch (h) { case Vt.where.Column:if (t.isColSpan) return Vt.resultAction.SubtractSpanCount; break; case Vt.where.Row:if (!t.isVirtual&&t.isRowSpan) return Vt.resultAction.AddCell; if (t.isRowSpan) return Vt.resultAction.SubtractSpanCount } return Vt.resultAction.RemoveCell } function k (t) { switch (h) { case Vt.where.Column:if (t.isColSpan) return Vt.resultAction.SumSpanCount; if (t.isRowSpan&&t.isVirtual) return Vt.resultAction.Ignore; break; case Vt.where.Row:if (t.isRowSpan) return Vt.resultAction.SumSpanCount; if (t.isColSpan&&t.isVirtual) return Vt.resultAction.Ignore } return Vt.resultAction.AddCell } this.getActionList=function () { for (var t, e, o, n=h===Vt.where.Row?f.rowPos:-1, i=h===Vt.where.Column?f.colPos:-1, r=0, a=!0; a;) { var s=n>=0?n:r, l=i>=0?i:r, c=m[s]; if (!c) return a=!1, g; var d=c[l]; if (!d) return a=!1, g; var u=Vt.resultAction.Ignore; switch (p) { case Vt.requestAction.Add:u=k(d); break; case Vt.requestAction.Delete:u=C(d) }g.push((t=u, e=s, o=l, { baseCell: d.baseCell, action: t, virtualTable: { rowIndex: e, cellIndex: o } })), r++ } return g }, t&&t.tagName&&(t.tagName.toLowerCase()==='td'||t.tagName.toLowerCase()==='th')?(f.colPos=t.cellIndex, t.parentElement&&t.parentElement.tagName&&t.parentElement.tagName.toLowerCase()==='tr'?f.rowPos=t.parentElement.rowIndex:console.error('Impossible to identify start Row point.', t)):console.error('Impossible to identify start Cell point.', t), (function () { for (var t=i.rows, e=0; e<t.length; e++) for (var o=t[e].cells, n=0; n<o.length; n++)r(t[e], o[n]) }()) }; Vt.where={ Row: 0, Column: 1 }, Vt.requestAction={ Add: 0, Delete: 1 }, Vt.resultAction={ Ignore: 0, SubtractSpanCount: 1, RemoveCell: 2, AddCell: 3, SumSpanCount: 4 }; var qt, Kt=(function () { function t () {} return t.prototype.tab=function (t, e) { var o=$t.ancestor(t.commonAncestor(), $t.isCell), n=$t.ancestor(o, $t.isTable), i=$t.listDescendant(n, $t.isCell), r=j[e?'prev':'next'](i, o); r&&Dt.create(r, 0).select() }, t.prototype.addRow=function (t, e) { for (var o=$t.ancestor(t.commonAncestor(), $t.isCell), n=f(o).closest('tr'), i=this.recoverAttributes(n), r=f('<tr'+i+'></tr>'), a=new Vt(o, Vt.where.Row, Vt.requestAction.Add, f(n).closest('table')[0]).getActionList(), s=0; s<a.length; s++) { var l=a[s], c=this.recoverAttributes(l.baseCell); switch (l.action) { case Vt.resultAction.AddCell:r.append('<td'+c+'>'+$t.blank+'</td>'); break; case Vt.resultAction.SumSpanCount:if (e==='top') if ((l.baseCell.parent?l.baseCell.closest('tr').rowIndex:0)<=n[0].rowIndex) { var d=f('<div></div>').append(f('<td'+c+'>'+$t.blank+'</td>').removeAttr('rowspan')).html(); r.append(d); break } var u=parseInt(l.baseCell.rowSpan, 10); u++, l.baseCell.setAttribute('rowSpan', u) } } if (e==='top')n.before(r); else { if (o.rowSpan>1) { var h=n[0].rowIndex+(o.rowSpan-2); return void f(f(n).parent().find('tr')[h]).after(f(r)) }n.after(r) } }, t.prototype.addCol=function (t, e) { var o=$t.ancestor(t.commonAncestor(), $t.isCell), n=f(o).closest('tr'); f(n).siblings().push(n); for (var i=new Vt(o, Vt.where.Column, Vt.requestAction.Add, f(n).closest('table')[0]).getActionList(), r=0; r<i.length; r++) { var a=i[r], s=this.recoverAttributes(a.baseCell); switch (a.action) { case Vt.resultAction.AddCell:e==='right'?f(a.baseCell).after('<td'+s+'>'+$t.blank+'</td>'):f(a.baseCell).before('<td'+s+'>'+$t.blank+'</td>'); break; case Vt.resultAction.SumSpanCount:if (e==='right') { var l=parseInt(a.baseCell.colSpan, 10); l++, a.baseCell.setAttribute('colSpan', l) } else f(a.baseCell).before('<td'+s+'>'+$t.blank+'</td>') } } }, t.prototype.recoverAttributes=function (t) { var e=''; if (!t) return e; for (var o=t.attributes||[], n=0; n<o.length; n++)o[n].name.toLowerCase()!=='id'&&o[n].specified&&(e+=' '+o[n].name+"='"+o[n].value+"'"); return e }, t.prototype.deleteRow=function (t) { for (var e=$t.ancestor(t.commonAncestor(), $t.isCell), o=f(e).closest('tr'), n=o.children('td, th').index(f(e)), i=o[0].rowIndex, r=new Vt(e, Vt.where.Row, Vt.requestAction.Delete, f(o).closest('table')[0]).getActionList(), a=0; a<r.length; a++) if (r[a]) { var s=r[a].baseCell, l=r[a].virtualTable, c=s.rowSpan&&s.rowSpan>1, d=c?parseInt(s.rowSpan, 10):0; switch (r[a].action) { case Vt.resultAction.Ignore:continue; case Vt.resultAction.AddCell:var u=o.next('tr')[0]; if (!u) continue; var h=o[0].cells[n]; c&&(d>2?(d--, u.insertBefore(h, u.cells[n]), u.cells[n].setAttribute('rowSpan', d), u.cells[n].innerHTML=''):d===2&&(u.insertBefore(h, u.cells[n]), u.cells[n].removeAttribute('rowSpan'), u.cells[n].innerHTML='')); continue; case Vt.resultAction.SubtractSpanCount:c&&(d>2?(d--, s.setAttribute('rowSpan', d), l.rowIndex!==i&&s.cellIndex===n&&(s.innerHTML='')):d===2&&(s.removeAttribute('rowSpan'), l.rowIndex!==i&&s.cellIndex===n&&(s.innerHTML=''))); continue; case Vt.resultAction.RemoveCell:continue } }o.remove() }, t.prototype.deleteCol=function (t) { for (var e=$t.ancestor(t.commonAncestor(), $t.isCell), o=f(e).closest('tr'), n=o.children('td, th').index(f(e)), i=new Vt(e, Vt.where.Column, Vt.requestAction.Delete, f(o).closest('table')[0]).getActionList(), r=0; r<i.length; r++) if (i[r]) switch (i[r].action) { case Vt.resultAction.Ignore:continue; case Vt.resultAction.SubtractSpanCount:var a=i[r].baseCell; if (a.colSpan&&a.colSpan>1) { var s=a.colSpan?parseInt(a.colSpan, 10):0; s>2?(s--, a.setAttribute('colSpan', s), a.cellIndex===n&&(a.innerHTML='')):s===2&&(a.removeAttribute('colSpan'), a.cellIndex===n&&(a.innerHTML='')) } continue; case Vt.resultAction.RemoveCell:$t.remove(i[r].baseCell, !0); continue } }, t.prototype.createTable=function (t, e, o) { for (var n, i=[], r=0; r<t; r++)i.push('<td>'+$t.blank+'</td>'); n=i.join(''); for (var a, s=[], l=0; l<e; l++)s.push('<tr>'+n+'</tr>'); a=s.join(''); var c=f('<table>'+a+'</table>'); return o&&o.tableClassName&&c.addClass(o.tableClassName), c[0] }, t.prototype.deleteTable=function (t) { var e=$t.ancestor(t.commonAncestor(), $t.isCell); f(e).closest('table').remove() }, t }()), Wt=(function () { function t (t) { var d=this; this.context=t, this.$note=t.layoutInfo.note, this.$editor=t.layoutInfo.editor, this.$editable=t.layoutInfo.editable, this.options=t.options, this.lang=this.options.langInfo, this.editable=this.$editable[0], this.lastRange=null, this.style=new Ot(), this.table=new Kt(), this.typing=new jt(), this.bullet=new Ut(), this.history=new zt(this.$editable), this.context.memo('help.undo', this.lang.help.undo), this.context.memo('help.redo', this.lang.help.redo), this.context.memo('help.tab', this.lang.help.tab), this.context.memo('help.untab', this.lang.help.untab), this.context.memo('help.insertParagraph', this.lang.help.insertParagraph), this.context.memo('help.insertOrderedList', this.lang.help.insertOrderedList), this.context.memo('help.insertUnorderedList', this.lang.help.insertUnorderedList), this.context.memo('help.indent', this.lang.help.indent), this.context.memo('help.outdent', this.lang.help.outdent), this.context.memo('help.formatPara', this.lang.help.formatPara), this.context.memo('help.insertHorizontalRule', this.lang.help.insertHorizontalRule), this.context.memo('help.fontName', this.lang.help.fontName); for (var e=['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'formatBlock', 'removeFormat', 'backColor'], o=0, n=e.length; o<n; o++) this[e[o]]=(function (e) { return function (t) { d.beforeCommand(), document.execCommand(e, !1, t), d.afterCommand(!0) } }(e[o])), this.context.memo('help.'+e[o], this.lang.help[e[o]]); this.fontName=this.wrapCommand(function (t) { return d.fontStyling('font-family', "'"+t+"'") }), this.fontSize=this.wrapCommand(function (t) { return d.fontStyling('font-size', t+'px') }); for (o=1; o<=6; o++) this['formatH'+o]=(function (t) { return function () { d.formatBlock('H'+t) } }(o)), this.context.memo('help.formatH'+o, this.lang.help['formatH'+o]); this.insertParagraph=this.wrapCommand(function () { d.typing.insertParagraph(d.editable) }), this.insertOrderedList=this.wrapCommand(function () { d.bullet.insertOrderedList(d.editable) }), this.insertUnorderedList=this.wrapCommand(function () { d.bullet.insertUnorderedList(d.editable) }), this.indent=this.wrapCommand(function () { d.bullet.indent(d.editable) }), this.outdent=this.wrapCommand(function () { d.bullet.outdent(d.editable) }), this.insertNode=this.wrapCommand(function (t) { d.isLimited(f(t).text().length)||(d.createRange().insertNode(t), Dt.createFromNodeAfter(t).select()) }), this.insertText=this.wrapCommand(function (t) { if (!d.isLimited(t.length)) { var e=d.createRange().insertNode($t.createText(t)); Dt.create(e, $t.nodeLength(e)).select() } }), this.pasteHTML=this.wrapCommand(function (t) { if (!d.isLimited(t.length)) { var e=d.createRange().pasteHTML(t); Dt.createFromNodeAfter(j.last(e)).select() } }), this.formatBlock=this.wrapCommand(function (t, e) { var o=d.options.callbacks.onApplyCustomStyle; o?o.call(d, e, d.context, d.onFormatBlock):d.onFormatBlock(t, e) }), this.insertHorizontalRule=this.wrapCommand(function () { var t=d.createRange().insertNode($t.create('HR')); t.nextSibling&&Dt.create(t.nextSibling, 0).normalize().select() }), this.lineHeight=this.wrapCommand(function (t) { d.style.stylePara(d.createRange(), { lineHeight: t }) }), this.createLink=this.wrapCommand(function (t) { var o=t.url, e=t.text, n=t.isNewWindow, i=t.range||d.createRange(), r=i.toString()!==e; typeof o==='string'&&(o=o.trim()), d.options.onCreateLink?o=d.options.onCreateLink(o):/^\.?\/(.*)/.test(o)||(o=/^[A-Za-z][A-Za-z0-9+-.]*\:[\/\/]?/.test(o)?o:'http://'+o); var a=[]; if (r) { var s=(i=i.deleteContents()).insertNode(f('<A>'+e+'</A>')[0]); a.push(s) } else a=d.style.styleNodes(i, { nodeName: 'A', expandClosestSibling: !0, onlyPartialContains: !0 }); f.each(a, function (t, e) { f(e).attr('href', o), n?f(e).attr('target', '_blank'):f(e).removeAttr('target') }); var l=Dt.createFromNodeBefore(j.head(a)).getStartPoint(), c=Dt.createFromNodeAfter(j.last(a)).getEndPoint(); Dt.create(l.node, l.offset, c.node, c.offset).select() }), this.color=this.wrapCommand(function (t) { var e=t.foreColor, o=t.backColor; e&&document.execCommand('foreColor', !1, e), o&&document.execCommand('backColor', !1, o) }), this.foreColor=this.wrapCommand(function (t) { document.execCommand('styleWithCSS', !1, !0), document.execCommand('foreColor', !1, t) }), this.insertTable=this.wrapCommand(function (t) { var e=t.split('x'); d.createRange().deleteContents().insertNode(d.table.createTable(e[0], e[1], d.options)) }), this.removeMedia=this.wrapCommand(function () { var t=f(d.restoreTarget()).parent(); t.parent('figure').length?t.parent('figure').remove():t=f(d.restoreTarget()).detach(), d.context.triggerEvent('media.delete', t, d.$editable) }), this.floatMe=this.wrapCommand(function (t) { var e=f(d.restoreTarget()); e.toggleClass('note-float-left', t==='left'), e.toggleClass('note-float-right', t==='right'), e.css('float', t) }), this.resize=this.wrapCommand(function (t) { f(d.restoreTarget()).css({ width: 100*t+'%', height: '' }) }) } return t.prototype.initialize=function () { var e=this; this.$editable.on('keydown', function (t) { if (t.keyCode===q.code.ENTER&&e.context.triggerEvent('enter', t), e.context.triggerEvent('keydown', t), t.isDefaultPrevented()||(e.options.shortcuts?e.handleKeyMap(t):e.preventDefaultEditableShortCuts(t)), e.isLimited(1, t)) return !1 }).on('keyup', function (t) { e.context.triggerEvent('keyup', t) }).on('focus', function (t) { e.context.triggerEvent('focus', t) }).on('blur', function (t) { e.context.triggerEvent('blur', t) }).on('mousedown', function (t) { e.context.triggerEvent('mousedown', t) }).on('mouseup', function (t) { e.context.triggerEvent('mouseup', t) }).on('scroll', function (t) { e.context.triggerEvent('scroll', t) }).on('paste', function (t) { e.context.triggerEvent('paste', t) }), this.$editable.html($t.html(this.$note)||$t.emptyPara), this.$editable.on(L.inputEventName, B.debounce(function () { e.context.triggerEvent('change', e.$editable.html()) }, 100)), this.$editor.on('focusin', function (t) { e.context.triggerEvent('focusin', t) }).on('focusout', function (t) { e.context.triggerEvent('focusout', t) }), this.options.airMode||(this.options.width&&this.$editor.outerWidth(this.options.width), this.options.height&&this.$editable.outerHeight(this.options.height), this.options.maxHeight&&this.$editable.css('max-height', this.options.maxHeight), this.options.minHeight&&this.$editable.css('min-height', this.options.minHeight)), this.history.recordUndo() }, t.prototype.destroy=function () { this.$editable.off() }, t.prototype.handleKeyMap=function (t) { var e=this.options.keyMap[L.isMac?'mac':'pc'], o=[]; t.metaKey&&o.push('CMD'), t.ctrlKey&&!t.altKey&&o.push('CTRL'), t.shiftKey&&o.push('SHIFT'); var n=q.nameFromCode[t.keyCode]; n&&o.push(n); var i=e[o.join('+')]; i?!1!==this.context.invoke(i)&&t.preventDefault():q.isEdit(t.keyCode)&&this.afterCommand() }, t.prototype.preventDefaultEditableShortCuts=function (t) { (t.ctrlKey||t.metaKey)&&j.contains([66, 73, 85], t.keyCode)&&t.preventDefault() }, t.prototype.isLimited=function (t, e) { return t=t||0, (void 0===e||!(q.isMove(e.keyCode)||e.ctrlKey||e.metaKey||j.contains([q.code.BACKSPACE, q.code.DELETE], e.keyCode)))&&(this.options.maxTextLength>0&&this.$editable.text().length+t>=this.options.maxTextLength) }, t.prototype.createRange=function () { return this.focus(), Dt.create(this.editable) }, t.prototype.saveRange=function (t) { this.lastRange=this.createRange(), t&&this.lastRange.collapse().select() }, t.prototype.restoreRange=function () { this.lastRange&&(this.lastRange.select(), this.focus()) }, t.prototype.saveTarget=function (t) { this.$editable.data('target', t) }, t.prototype.clearTarget=function () { this.$editable.removeData('target') }, t.prototype.restoreTarget=function () { return this.$editable.data('target') }, t.prototype.currentStyle=function () { var t=Dt.create(); return t&&(t=t.normalize()), t?this.style.current(t):this.style.fromNode(this.$editable) }, t.prototype.styleFromNode=function (t) { return this.style.fromNode(t) }, t.prototype.undo=function () { this.context.triggerEvent('before.command', this.$editable.html()), this.history.undo(), this.context.triggerEvent('change', this.$editable.html()) }, t.prototype.redo=function () { this.context.triggerEvent('before.command', this.$editable.html()), this.history.redo(), this.context.triggerEvent('change', this.$editable.html()) }, t.prototype.beforeCommand=function () { this.context.triggerEvent('before.command', this.$editable.html()), this.focus() }, t.prototype.afterCommand=function (t) { this.normalizeContent(), this.history.recordUndo(), t||this.context.triggerEvent('change', this.$editable.html()) }, t.prototype.tab=function () { var t=this.createRange(); if (t.isCollapsed()&&t.isOnCell()) this.table.tab(t); else { if (this.options.tabSize===0) return !1; this.isLimited(this.options.tabSize)||(this.beforeCommand(), this.typing.insertTab(t, this.options.tabSize), this.afterCommand()) } }, t.prototype.untab=function () { var t=this.createRange(); if (t.isCollapsed()&&t.isOnCell()) this.table.tab(t, !0); else if (this.options.tabSize===0) return !1 }, t.prototype.wrapCommand=function (t) { var e=this; return function () { e.beforeCommand(), t.apply(e, arguments), e.afterCommand() } }, t.prototype.insertImage=function (t, e) { var o, n=this; return (o=t, f.Deferred(function (t) { var e=f('<img>'); e.one('load', function () { e.off('error abort'), t.resolve(e) }).one('error abort', function () { e.off('load').detach(), t.reject(e) }).css({ display: 'none' }).appendTo(document.body).attr('src', o) }).promise()).then(function (t) { n.beforeCommand(), typeof e==='function'?e(t):(typeof e==='string'&&t.attr('data-filename', e), t.css('width', Math.min(n.$editable.width(), t.width()))), t.show(), Dt.create(n.editable).insertNode(t[0]), Dt.createFromNodeAfter(t[0]).select(), n.afterCommand() }).fail(function (t) { n.context.triggerEvent('image.upload.error', t) }) }, t.prototype.insertImagesAsDataURL=function (t) { var i=this; f.each(t, function (t, e) { var n, o=e.name; i.options.maximumImageFileSize&&i.options.maximumImageFileSize<e.size?i.context.triggerEvent('image.upload.error', i.lang.image.maximumFileSizeError):(n=e, f.Deferred(function (o) { f.extend(new FileReader(), { onload: function (t) { var e=t.target.result; o.resolve(e) }, onerror: function (t) { o.reject(t) } }).readAsDataURL(n) }).promise()).then(function (t) { return i.insertImage(t, o) }).fail(function () { i.context.triggerEvent('image.upload.error') }) }) }, t.prototype.insertImagesOrCallback=function (t) { this.options.callbacks.onImageUpload?this.context.triggerEvent('image.upload', t):this.context.invoke('editor.insertImagesAsDataURL', t) }, t.prototype.getSelectedText=function () { var t=this.createRange(); return t.isOnAnchor()&&(t=Dt.createFromNode($t.ancestor(t.sc, $t.isAnchor))), t.toString() }, t.prototype.onFormatBlock=function (t, e) { if (t=L.isMSIE?'<'+t+'>':t, document.execCommand('FormatBlock', !1, t), e&&e.length) { var o=e[0].className||''; if (o) { var n=this.createRange(); f([n.sc, n.ec]).closest(t).addClass(o) } } }, t.prototype.formatPara=function () { this.formatBlock('P') }, t.prototype.fontStyling=function (t, e) { var o=this.createRange(); if (o) { var n=this.style.styleNodes(o); if (f(n).css(t, e), o.isCollapsed()) { var i=j.head(n); i&&!$t.nodeLength(i)&&(i.innerHTML=$t.ZERO_WIDTH_NBSP_CHAR, Dt.createFromNodeAfter(i.firstChild).select(), this.$editable.data('bogus', i)) } } }, t.prototype.unlink=function () { var t=this.createRange(); if (t.isOnAnchor()) { var e=$t.ancestor(t.sc, $t.isAnchor); (t=Dt.createFromNode(e)).select(), this.beforeCommand(), document.execCommand('unlink'), this.afterCommand() } }, t.prototype.getLinkInfo=function () { var t=this.createRange().expand($t.isAnchor), e=f(j.head(t.nodes($t.isAnchor))), o={ range: t, text: t.toString(), url: e.length?e.attr('href'):'' }; return e.length&&(o.isNewWindow=e.attr('target')==='_blank'), o }, t.prototype.addRow=function (t) { var e=this.createRange(this.$editable); e.isCollapsed()&&e.isOnCell()&&(this.beforeCommand(), this.table.addRow(e, t), this.afterCommand()) }, t.prototype.addCol=function (t) { var e=this.createRange(this.$editable); e.isCollapsed()&&e.isOnCell()&&(this.beforeCommand(), this.table.addCol(e, t), this.afterCommand()) }, t.prototype.deleteRow=function () { var t=this.createRange(this.$editable); t.isCollapsed()&&t.isOnCell()&&(this.beforeCommand(), this.table.deleteRow(t), this.afterCommand()) }, t.prototype.deleteCol=function () { var t=this.createRange(this.$editable); t.isCollapsed()&&t.isOnCell()&&(this.beforeCommand(), this.table.deleteCol(t), this.afterCommand()) }, t.prototype.deleteTable=function () { var t=this.createRange(this.$editable); t.isCollapsed()&&t.isOnCell()&&(this.beforeCommand(), this.table.deleteTable(t), this.afterCommand()) }, t.prototype.resizeTo=function (t, e, o) { var n; if (o) { var i=t.y/t.x, r=e.data('ratio'); n={ width: i<r?t.x:t.y/r, height: i<r?t.x*r:t.y } } else n={ width: t.x, height: t.y }; e.css(n) }, t.prototype.hasFocus=function () { return this.$editable.is(':focus') }, t.prototype.focus=function () { this.hasFocus()||this.$editable.focus() }, t.prototype.isEmpty=function () { return $t.isEmpty(this.$editable[0])||$t.emptyPara===this.$editable.html() }, t.prototype.empty=function () { this.context.invoke('code', $t.emptyPara) }, t.prototype.normalizeContent=function () { this.$editable[0].normalize() }, t }()), Gt=(function () { function t (t) { this.context=t, this.$editable=t.layoutInfo.editable } return t.prototype.initialize=function () { this.$editable.on('paste', this.pasteByEvent.bind(this)) }, t.prototype.pasteByEvent=function (t) { var e=t.originalEvent.clipboardData; if (e&&e.items&&e.items.length) { var o=j.head(e.items); o.kind==='file'&&o.type.indexOf('image/')!==-1&&this.context.invoke('editor.insertImagesOrCallback', [o.getAsFile()]), this.context.invoke('editor.afterCommand') } }, t }()), _t=(function () { function t (t) { this.context=t, this.$eventListener=f(document), this.$editor=t.layoutInfo.editor, this.$editable=t.layoutInfo.editable, this.options=t.options, this.lang=this.options.langInfo, this.documentEventHandlers={}, this.$dropzone=f(['<div class="note-dropzone">', '  <div class="note-dropzone-message"/>', '</div>'].join('')).prependTo(this.$editor) } return t.prototype.initialize=function () { this.options.disableDragAndDrop?(this.documentEventHandlers.onDrop=function (t) { t.preventDefault() }, this.$eventListener=this.$dropzone, this.$eventListener.on('drop', this.documentEventHandlers.onDrop)):this.attachDragAndDropEvent() }, t.prototype.attachDragAndDropEvent=function () { var i=this, n=f(), r=this.$dropzone.find('.note-dropzone-message'); this.documentEventHandlers.onDragenter=function (t) { var e=i.context.invoke('codeview.isActivated'), o=i.$editor.width()>0&&i.$editor.height()>0; e||n.length||!o||(i.$editor.addClass('dragover'), i.$dropzone.width(i.$editor.width()), i.$dropzone.height(i.$editor.height()), r.text(i.lang.image.dragImageHere)), n=n.add(t.target) }, this.documentEventHandlers.onDragleave=function (t) { (n=n.not(t.target)).length||i.$editor.removeClass('dragover') }, this.documentEventHandlers.onDrop=function () { n=f(), i.$editor.removeClass('dragover') }, this.$eventListener.on('dragenter', this.documentEventHandlers.onDragenter).on('dragleave', this.documentEventHandlers.onDragleave).on('drop', this.documentEventHandlers.onDrop), this.$dropzone.on('dragenter', function () { i.$dropzone.addClass('hover'), r.text(i.lang.image.dropImage) }).on('dragleave', function () { i.$dropzone.removeClass('hover'), r.text(i.lang.image.dragImageHere) }), this.$dropzone.on('drop', function (t) { var n=t.originalEvent.dataTransfer; t.preventDefault(), n&&n.files&&n.files.length?(i.$editable.focus(), i.context.invoke('editor.insertImagesOrCallback', n.files)):f.each(n.types, function (t, e) { var o=n.getData(e); e.toLowerCase().indexOf('text')>-1?i.context.invoke('editor.pasteHTML', o):f(o).each(function (t, e) { i.context.invoke('editor.insertNode', e) }) }) }).on('dragover', !1) }, t.prototype.destroy=function () { var e=this; Object.keys(this.documentEventHandlers).forEach(function (t) { e.$eventListener.off(t.substr(2).toLowerCase(), e.documentEventHandlers[t]) }), this.documentEventHandlers={} }, t }()); L.hasCodeMirror&&(L.isSupportAmd?require(['codemirror'], function (t) { qt=t }):qt=window.CodeMirror); var Yt=(function () { function t (t) { this.context=t, this.$editor=t.layoutInfo.editor, this.$editable=t.layoutInfo.editable, this.$codable=t.layoutInfo.codable, this.options=t.options } return t.prototype.sync=function () { this.isActivated()&&L.hasCodeMirror&&this.$codable.data('cmEditor').save() }, t.prototype.isActivated=function () { return this.$editor.hasClass('codeview') }, t.prototype.toggle=function () { this.isActivated()?this.deactivate():this.activate(), this.context.triggerEvent('codeview.toggled') }, t.prototype.activate=function () { var e=this; if (this.$codable.val($t.html(this.$editable, this.options.prettifyHtml)), this.$codable.height(this.$editable.height()), this.context.invoke('toolbar.updateCodeview', !0), this.$editor.addClass('codeview'), this.$codable.focus(), L.hasCodeMirror) { var o=qt.fromTextArea(this.$codable[0], this.options.codemirror); if (this.options.codemirror.tern) { var n=new qt.TernServer(this.options.codemirror.tern); o.ternServer=n, o.on('cursorActivity', function (t) { n.updateArgHints(t) }) }o.on('blur', function (t) { e.context.triggerEvent('blur.codeview', o.getValue(), t) }), o.setSize(null, this.$editable.outerHeight()), this.$codable.data('cmEditor', o) } else this.$codable.on('blur', function (t) { e.context.triggerEvent('blur.codeview', e.$codable.val(), t) }) }, t.prototype.deactivate=function () { if (L.hasCodeMirror) { var t=this.$codable.data('cmEditor'); this.$codable.val(t.getValue()), t.toTextArea() } var e=$t.value(this.$codable, this.options.prettifyHtml)||$t.emptyPara, o=this.$editable.html()!==e; this.$editable.html(e), this.$editable.height(this.options.height?this.$codable.height():'auto'), this.$editor.removeClass('codeview'), o&&this.context.triggerEvent('change', this.$editable.html(), this.$editable), this.$editable.focus(), this.context.invoke('toolbar.updateCodeview', !1) }, t.prototype.destroy=function () { this.isActivated()&&this.deactivate() }, t }()), Zt=/^([A-Za-z][A-Za-z0-9+-.]*\:[\/]{2}|mailto:[A-Z0-9._%+-]+@)?(www\.)?(.+)$/i, Qt=(function () { function t (t) { var o=this; this.context=t, this.events={ 'summernote.keyup': function (t, e) { e.isDefaultPrevented()||o.handleKeyup(e) }, 'summernote.keydown': function (t, e) { o.handleKeydown(e) } } } return t.prototype.initialize=function () { this.lastWordRange=null }, t.prototype.destroy=function () { this.lastWordRange=null }, t.prototype.replace=function () { if (this.lastWordRange) { var t=this.lastWordRange.toString(), e=t.match(Zt); if (e&&(e[1]||e[2])) { var o=e[1]?t:'http://'+t, n=f('<a />').html(t).attr('href', o)[0]; this.lastWordRange.insertNode(n), this.lastWordRange=null, this.context.invoke('editor.focus') } } }, t.prototype.handleKeydown=function (t) { if (j.contains([q.code.ENTER, q.code.SPACE], t.keyCode)) { var e=this.context.invoke('editor.createRange').getWordRange(); this.lastWordRange=e } }, t.prototype.handleKeyup=function (t) { j.contains([q.code.ENTER, q.code.SPACE], t.keyCode)&&this.replace() }, t }()), Xt=(function () { function t (t) { var e=this; this.$note=t.layoutInfo.note, this.events={ 'summernote.change': function () { e.$note.val(t.invoke('code')) } } } return t.prototype.shouldInitialize=function () { return $t.isTextarea(this.$note[0]) }, t }()), Jt=(function () { function t (t) { var e=this; this.context=t, this.$editingArea=t.layoutInfo.editingArea, this.options=t.options, this.events={ 'summernote.init summernote.change': function () { e.update() }, 'summernote.codeview.toggled': function () { e.update() } } } return t.prototype.shouldInitialize=function () { return !!this.options.placeholder }, t.prototype.initialize=function () { var t=this; this.$placeholder=f('<div class="note-placeholder">'), this.$placeholder.on('click', function () { t.context.invoke('focus') }).text(this.options.placeholder).prependTo(this.$editingArea), this.update() }, t.prototype.destroy=function () { this.$placeholder.remove() }, t.prototype.update=function () { var t=!this.context.invoke('codeview.isActivated')&&this.context.invoke('editor.isEmpty'); this.$placeholder.toggle(t) }, t }()), te=(function () { function t (t) { this.ui=f.summernote.ui, this.context=t, this.$toolbar=t.layoutInfo.toolbar, this.options=t.options, this.lang=this.options.langInfo, this.invertedKeyMap=B.invertObject(this.options.keyMap[L.isMac?'mac':'pc']) } return t.prototype.representShortcut=function (t) { var e=this.invertedKeyMap[t]; return this.options.shortcuts&&e?(L.isMac&&(e=e.replace('CMD', '⌘').replace('SHIFT', '⇧')), ' ('+(e=e.replace('BACKSLASH', '\\').replace('SLASH', '/').replace('LEFTBRACKET', '[').replace('RIGHTBRACKET', ']'))+')'):'' }, t.prototype.button=function (t) { return !this.options.tooltip&&t.tooltip&&delete t.tooltip, t.container=this.options.container, this.ui.button(t) }, t.prototype.initialize=function () { this.addToolbarButtons(), this.addImagePopoverButtons(), this.addLinkPopoverButtons(), this.addTablePopoverButtons(), this.fontInstalledMap={} }, t.prototype.destroy=function () { delete this.fontInstalledMap }, t.prototype.isFontInstalled=function (t) { return this.fontInstalledMap.hasOwnProperty(t)||(this.fontInstalledMap[t]=L.isFontInstalled(t)||j.contains(this.options.fontNamesIgnoreCheck, t)), this.fontInstalledMap[t] }, t.prototype.isFontDeservedToAdd=function (t) { return (t=t.toLowerCase())!==''&&this.isFontInstalled(t)&&f.inArray(t, ['sans-serif', 'serif', 'monospace', 'cursive', 'fantasy'])===-1 }, t.prototype.colorPalette=function (h, t, o, n) { var p=this; return this.ui.buttonGroup({ className: 'note-color '+h, children: [this.button({ className: 'note-current-color-button', contents: this.ui.icon(this.options.icons.font+' note-recent-color'), tooltip: t, click: function (t) { var e=f(t.currentTarget); o&&n?p.context.invoke('editor.color', { backColor: e.attr('data-backColor'), foreColor: e.attr('data-foreColor') }):o?p.context.invoke('editor.color', { backColor: e.attr('data-backColor') }):n&&p.context.invoke('editor.color', { foreColor: e.attr('data-foreColor') }) }, callback: function (t) { var e=t.find('.note-recent-color'); o&&(e.css('background-color', '#FFFF00'), t.attr('data-backColor', '#FFFF00')), n||e.css('color', 'transparent') } }), this.button({ className: 'dropdown-toggle', contents: this.ui.dropdownButtonContents('', this.options), tooltip: this.lang.color.more, data: { toggle: 'dropdown' } }), this.ui.dropdown({ items: (o?['<div class="note-palette">', '  <div class="note-palette-title">'+this.lang.color.background+'</div>', '  <div>', '    <button type="button" class="note-color-reset btn btn-light" data-event="backColor" data-value="inherit">', this.lang.color.transparent, '    </button>', '  </div>', '  <div class="note-holder" data-event="backColor"/>', '  <div>', '    <button type="button" class="note-color-select btn" data-event="openPalette" data-value="backColorPicker">', this.lang.color.cpSelect, '    </button>', '    <input type="color" id="backColorPicker" class="note-btn note-color-select-btn" value="#FFFF00" data-event="backColorPalette">', '  </div>', '  <div class="note-holder-custom" id="backColorPalette" data-event="backColor"/>', '</div>'].join(''):'')+(n?['<div class="note-palette">', '  <div class="note-palette-title">'+this.lang.color.foreground+'</div>', '  <div>', '    <button type="button" class="note-color-reset btn btn-light" data-event="removeFormat" data-value="foreColor">', this.lang.color.resetToDefault, '    </button>', '  </div>', '  <div class="note-holder" data-event="foreColor"/>', '  <div>', '    <button type="button" class="note-color-select btn" data-event="openPalette" data-value="foreColorPicker">', this.lang.color.cpSelect, '    </button>', '    <input type="color" id="foreColorPicker" class="note-btn note-color-select-btn" value="#000000" data-event="foreColorPalette">', '  <div class="note-holder-custom" id="foreColorPalette" data-event="foreColor"/>', '</div>'].join(''):''), callback: function (o) { o.find('.note-holder').each(function (t, e) { var o=f(e); o.append(p.ui.palette({ colors: p.options.colors, colorsName: p.options.colorsName, eventName: o.data('event'), container: p.options.container, tooltip: p.options.tooltip }).render()) }); var n=[['#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF']]; o.find('.note-holder-custom').each(function (t, e) { var o=f(e); o.append(p.ui.palette({ colors: n, colorsName: n, eventName: o.data('event'), container: p.options.container, tooltip: p.options.tooltip }).render()) }), o.find('input[type=color]').each(function (t, e) { f(e).change(function () { var t=o.find('#'+f(this).data('event')).find('.note-color-btn').first(), e=this.value.toUpperCase(); t.css('background-color', e).attr('aria-label', e).attr('data-value', e).attr('data-original-title', e), t.click() }) }) }, click: function (t) { t.stopPropagation(); var e=f('.'+h), o=f(t.target), n=o.data('event'), i=o.attr('data-value'); if (n==='openPalette') { var r=e.find('#'+i), a=f(e.find('#'+r.data('event')).find('.note-color-row')[0]), s=a.find('.note-color-btn').last().detach(), l=r.val(); s.css('background-color', l).attr('aria-label', l).attr('data-value', l).attr('data-original-title', l), a.prepend(s), r.click() } else if (j.contains(['backColor', 'foreColor'], n)) { var c=n==='backColor'?'background-color':'color', d=o.closest('.note-color').find('.note-recent-color'), u=o.closest('.note-color').find('.note-current-color-button'); d.css(c, i), u.attr('data-'+n, i), p.context.invoke('editor.'+n, i) } } })] }).render() }, t.prototype.addToolbarButtons=function () { var n=this; this.context.memo('button.style', function () { return n.ui.buttonGroup([n.button({ className: 'dropdown-toggle', contents: n.ui.dropdownButtonContents(n.ui.icon(n.options.icons.magic), n.options), tooltip: n.lang.style.style, data: { toggle: 'dropdown' } }), n.ui.dropdown({ className: 'dropdown-style', items: n.options.styleTags, title: n.lang.style.style, template: function (t) { typeof t==='string'&&(t={ tag: t, title: n.lang.style.hasOwnProperty(t)?n.lang.style[t]:t }); var e=t.tag, o=t.title; return '<'+e+(t.style?' style="'+t.style+'" ':'')+(t.className?' class="'+t.className+'"':'')+'>'+o+'</'+e+'>' }, click: n.context.createInvokeHandler('editor.formatBlock') })]).render() }); for (var t=function (t, e) { var o=i.options.styleTags[t]; i.context.memo('button.style.'+o, function () { return n.button({ className: 'note-btn-style-'+o, contents: '<div data-value="'+o+'">'+o.toUpperCase()+'</div>', tooltip: n.lang.style[o], click: n.context.createInvokeHandler('editor.formatBlock') }).render() }) }, i=this, e=0, o=this.options.styleTags.length; e<o; e++)t(e); this.context.memo('button.bold', function () { return n.button({ className: 'note-btn-bold', contents: n.ui.icon(n.options.icons.bold), tooltip: n.lang.font.bold+n.representShortcut('bold'), click: n.context.createInvokeHandlerAndUpdateState('editor.bold') }).render() }), this.context.memo('button.italic', function () { return n.button({ className: 'note-btn-italic', contents: n.ui.icon(n.options.icons.italic), tooltip: n.lang.font.italic+n.representShortcut('italic'), click: n.context.createInvokeHandlerAndUpdateState('editor.italic') }).render() }), this.context.memo('button.underline', function () { return n.button({ className: 'note-btn-underline', contents: n.ui.icon(n.options.icons.underline), tooltip: n.lang.font.underline+n.representShortcut('underline'), click: n.context.createInvokeHandlerAndUpdateState('editor.underline') }).render() }), this.context.memo('button.clear', function () { return n.button({ contents: n.ui.icon(n.options.icons.eraser), tooltip: n.lang.font.clear+n.representShortcut('removeFormat'), click: n.context.createInvokeHandler('editor.removeFormat') }).render() }), this.context.memo('button.strikethrough', function () { return n.button({ className: 'note-btn-strikethrough', contents: n.ui.icon(n.options.icons.strikethrough), tooltip: n.lang.font.strikethrough+n.representShortcut('strikethrough'), click: n.context.createInvokeHandlerAndUpdateState('editor.strikethrough') }).render() }), this.context.memo('button.superscript', function () { return n.button({ className: 'note-btn-superscript', contents: n.ui.icon(n.options.icons.superscript), tooltip: n.lang.font.superscript, click: n.context.createInvokeHandlerAndUpdateState('editor.superscript') }).render() }), this.context.memo('button.subscript', function () { return n.button({ className: 'note-btn-subscript', contents: n.ui.icon(n.options.icons.subscript), tooltip: n.lang.font.subscript, click: n.context.createInvokeHandlerAndUpdateState('editor.subscript') }).render() }), this.context.memo('button.fontname', function () { var t=n.context.invoke('editor.currentStyle'); return f.each(t['font-family'].split(','), function (t, e) { e=e.trim().replace(/['"]+/g, ''), n.isFontDeservedToAdd(e)&&f.inArray(e, n.options.fontNames)===-1&&n.options.fontNames.push(e) }), n.ui.buttonGroup([n.button({ className: 'dropdown-toggle', contents: n.ui.dropdownButtonContents('<span class="note-current-fontname"/>', n.options), tooltip: n.lang.font.name, data: { toggle: 'dropdown' } }), n.ui.dropdownCheck({ className: 'dropdown-fontname', checkClassName: n.options.icons.menuCheck, items: n.options.fontNames.filter(n.isFontInstalled.bind(n)), title: n.lang.font.name, template: function (t) { return "<span style=\"font-family: '"+t+"'\">"+t+'</span>' }, click: n.context.createInvokeHandlerAndUpdateState('editor.fontName') })]).render() }), this.context.memo('button.fontsize', function () { return n.ui.buttonGroup([n.button({ className: 'dropdown-toggle', contents: n.ui.dropdownButtonContents('<span class="note-current-fontsize"/>', n.options), tooltip: n.lang.font.size, data: { toggle: 'dropdown' } }), n.ui.dropdownCheck({ className: 'dropdown-fontsize', checkClassName: n.options.icons.menuCheck, items: n.options.fontSizes, title: n.lang.font.size, click: n.context.createInvokeHandlerAndUpdateState('editor.fontSize') })]).render() }), this.context.memo('button.color', function () { return n.colorPalette('note-color-all', n.lang.color.recent, !0, !0) }), this.context.memo('button.forecolor', function () { return n.colorPalette('note-color-fore', n.lang.color.foreground, !1, !0) }), this.context.memo('button.backcolor', function () { return n.colorPalette('note-color-back', n.lang.color.background, !0, !1) }), this.context.memo('button.ul', function () { return n.button({ contents: n.ui.icon(n.options.icons.unorderedlist), tooltip: n.lang.lists.unordered+n.representShortcut('insertUnorderedList'), click: n.context.createInvokeHandler('editor.insertUnorderedList') }).render() }), this.context.memo('button.ol', function () { return n.button({ contents: n.ui.icon(n.options.icons.orderedlist), tooltip: n.lang.lists.ordered+n.representShortcut('insertOrderedList'), click: n.context.createInvokeHandler('editor.insertOrderedList') }).render() }); var r=this.button({ contents: this.ui.icon(this.options.icons.alignLeft), tooltip: this.lang.paragraph.left+this.representShortcut('justifyLeft'), click: this.context.createInvokeHandler('editor.justifyLeft') }), a=this.button({ contents: this.ui.icon(this.options.icons.alignCenter), tooltip: this.lang.paragraph.center+this.representShortcut('justifyCenter'), click: this.context.createInvokeHandler('editor.justifyCenter') }), s=this.button({ contents: this.ui.icon(this.options.icons.alignRight), tooltip: this.lang.paragraph.right+this.representShortcut('justifyRight'), click: this.context.createInvokeHandler('editor.justifyRight') }), l=this.button({ contents: this.ui.icon(this.options.icons.alignJustify), tooltip: this.lang.paragraph.justify+this.representShortcut('justifyFull'), click: this.context.createInvokeHandler('editor.justifyFull') }), c=this.button({ contents: this.ui.icon(this.options.icons.outdent), tooltip: this.lang.paragraph.outdent+this.representShortcut('outdent'), click: this.context.createInvokeHandler('editor.outdent') }), d=this.button({ contents: this.ui.icon(this.options.icons.indent), tooltip: this.lang.paragraph.indent+this.representShortcut('indent'), click: this.context.createInvokeHandler('editor.indent') }); this.context.memo('button.justifyLeft', B.invoke(r, 'render')), this.context.memo('button.justifyCenter', B.invoke(a, 'render')), this.context.memo('button.justifyRight', B.invoke(s, 'render')), this.context.memo('button.justifyFull', B.invoke(l, 'render')), this.context.memo('button.outdent', B.invoke(c, 'render')), this.context.memo('button.indent', B.invoke(d, 'render')), this.context.memo('button.paragraph', function () { return n.ui.buttonGroup([n.button({ className: 'dropdown-toggle', contents: n.ui.dropdownButtonContents(n.ui.icon(n.options.icons.alignLeft), n.options), tooltip: n.lang.paragraph.paragraph, data: { toggle: 'dropdown' } }), n.ui.dropdown([n.ui.buttonGroup({ className: 'note-align', children: [r, a, s, l] }), n.ui.buttonGroup({ className: 'note-list', children: [c, d] })])]).render() }), this.context.memo('button.height', function () { return n.ui.buttonGroup([n.button({ className: 'dropdown-toggle', contents: n.ui.dropdownButtonContents(n.ui.icon(n.options.icons.textHeight), n.options), tooltip: n.lang.font.height, data: { toggle: 'dropdown' } }), n.ui.dropdownCheck({ items: n.options.lineHeights, checkClassName: n.options.icons.menuCheck, className: 'dropdown-line-height', title: n.lang.font.height, click: n.context.createInvokeHandler('editor.lineHeight') })]).render() }), this.context.memo('button.table', function () { return n.ui.buttonGroup([n.button({ className: 'dropdown-toggle', contents: n.ui.dropdownButtonContents(n.ui.icon(n.options.icons.table), n.options), tooltip: n.lang.table.table, data: { toggle: 'dropdown' } }), n.ui.dropdown({ title: n.lang.table.table, className: 'note-table', items: ['<div class="note-dimension-picker">', '  <div class="note-dimension-picker-mousecatcher" data-event="insertTable" data-value="1x1"/>', '  <div class="note-dimension-picker-highlighted"/>', '  <div class="note-dimension-picker-unhighlighted"/>', '</div>', '<div class="note-dimension-display">1 x 1</div>'].join('') })], { callback: function (t) { t.find('.note-dimension-picker-mousecatcher').css({ width: n.options.insertTableMaxSize.col+'em', height: n.options.insertTableMaxSize.row+'em' }).mousedown(n.context.createInvokeHandler('editor.insertTable')).on('mousemove', n.tableMoveHandler.bind(n)) } }).render() }), this.context.memo('button.link', function () { return n.button({ contents: n.ui.icon(n.options.icons.link), tooltip: n.lang.link.link+n.representShortcut('linkDialog.show'), click: n.context.createInvokeHandler('linkDialog.show') }).render() }), this.context.memo('button.picture', function () { return n.button({ contents: n.ui.icon(n.options.icons.picture), tooltip: n.lang.image.image, click: n.context.createInvokeHandler('imageDialog.show') }).render() }), this.context.memo('button.video', function () { return n.button({ contents: n.ui.icon(n.options.icons.video), tooltip: n.lang.video.video, click: n.context.createInvokeHandler('videoDialog.show') }).render() }), this.context.memo('button.hr', function () { return n.button({ contents: n.ui.icon(n.options.icons.minus), tooltip: n.lang.hr.insert+n.representShortcut('insertHorizontalRule'), click: n.context.createInvokeHandler('editor.insertHorizontalRule') }).render() }), this.context.memo('button.fullscreen', function () { return n.button({ className: 'btn-fullscreen', contents: n.ui.icon(n.options.icons.arrowsAlt), tooltip: n.lang.options.fullscreen, click: n.context.createInvokeHandler('fullscreen.toggle') }).render() }), this.context.memo('button.codeview', function () { return n.button({ className: 'btn-codeview', contents: n.ui.icon(n.options.icons.code), tooltip: n.lang.options.codeview, click: n.context.createInvokeHandler('codeview.toggle') }).render() }), this.context.memo('button.redo', function () { return n.button({ contents: n.ui.icon(n.options.icons.redo), tooltip: n.lang.history.redo+n.representShortcut('redo'), click: n.context.createInvokeHandler('editor.redo') }).render() }), this.context.memo('button.undo', function () { return n.button({ contents: n.ui.icon(n.options.icons.undo), tooltip: n.lang.history.undo+n.representShortcut('undo'), click: n.context.createInvokeHandler('editor.undo') }).render() }), this.context.memo('button.help', function () { return n.button({ contents: n.ui.icon(n.options.icons.question), tooltip: n.lang.options.help, click: n.context.createInvokeHandler('helpDialog.show') }).render() }) }, t.prototype.addImagePopoverButtons=function () { var t=this; this.context.memo('button.imageSize100', function () { return t.button({ contents: '<span class="note-fontsize-10">100%</span>', tooltip: t.lang.image.resizeFull, click: t.context.createInvokeHandler('editor.resize', '1') }).render() }), this.context.memo('button.imageSize50', function () { return t.button({ contents: '<span class="note-fontsize-10">50%</span>', tooltip: t.lang.image.resizeHalf, click: t.context.createInvokeHandler('editor.resize', '0.5') }).render() }), this.context.memo('button.imageSize25', function () { return t.button({ contents: '<span class="note-fontsize-10">25%</span>', tooltip: t.lang.image.resizeQuarter, click: t.context.createInvokeHandler('editor.resize', '0.25') }).render() }), this.context.memo('button.floatLeft', function () { return t.button({ contents: t.ui.icon(t.options.icons.alignLeft), tooltip: t.lang.image.floatLeft, click: t.context.createInvokeHandler('editor.floatMe', 'left') }).render() }), this.context.memo('button.floatRight', function () { return t.button({ contents: t.ui.icon(t.options.icons.alignRight), tooltip: t.lang.image.floatRight, click: t.context.createInvokeHandler('editor.floatMe', 'right') }).render() }), this.context.memo('button.floatNone', function () { return t.button({ contents: t.ui.icon(t.options.icons.alignJustify), tooltip: t.lang.image.floatNone, click: t.context.createInvokeHandler('editor.floatMe', 'none') }).render() }), this.context.memo('button.removeMedia', function () { return t.button({ contents: t.ui.icon(t.options.icons.trash), tooltip: t.lang.image.remove, click: t.context.createInvokeHandler('editor.removeMedia') }).render() }) }, t.prototype.addLinkPopoverButtons=function () { var t=this; this.context.memo('button.linkDialogShow', function () { return t.button({ contents: t.ui.icon(t.options.icons.link), tooltip: t.lang.link.edit, click: t.context.createInvokeHandler('linkDialog.show') }).render() }), this.context.memo('button.unlink', function () { return t.button({ contents: t.ui.icon(t.options.icons.unlink), tooltip: t.lang.link.unlink, click: t.context.createInvokeHandler('editor.unlink') }).render() }) }, t.prototype.addTablePopoverButtons=function () { var t=this; this.context.memo('button.addRowUp', function () { return t.button({ className: 'btn-md', contents: t.ui.icon(t.options.icons.rowAbove), tooltip: t.lang.table.addRowAbove, click: t.context.createInvokeHandler('editor.addRow', 'top') }).render() }), this.context.memo('button.addRowDown', function () { return t.button({ className: 'btn-md', contents: t.ui.icon(t.options.icons.rowBelow), tooltip: t.lang.table.addRowBelow, click: t.context.createInvokeHandler('editor.addRow', 'bottom') }).render() }), this.context.memo('button.addColLeft', function () { return t.button({ className: 'btn-md', contents: t.ui.icon(t.options.icons.colBefore), tooltip: t.lang.table.addColLeft, click: t.context.createInvokeHandler('editor.addCol', 'left') }).render() }), this.context.memo('button.addColRight', function () { return t.button({ className: 'btn-md', contents: t.ui.icon(t.options.icons.colAfter), tooltip: t.lang.table.addColRight, click: t.context.createInvokeHandler('editor.addCol', 'right') }).render() }), this.context.memo('button.deleteRow', function () { return t.button({ className: 'btn-md', contents: t.ui.icon(t.options.icons.rowRemove), tooltip: t.lang.table.delRow, click: t.context.createInvokeHandler('editor.deleteRow') }).render() }), this.context.memo('button.deleteCol', function () { return t.button({ className: 'btn-md', contents: t.ui.icon(t.options.icons.colRemove), tooltip: t.lang.table.delCol, click: t.context.createInvokeHandler('editor.deleteCol') }).render() }), this.context.memo('button.deleteTable', function () { return t.button({ className: 'btn-md', contents: t.ui.icon(t.options.icons.trash), tooltip: t.lang.table.delTable, click: t.context.createInvokeHandler('editor.deleteTable') }).render() }) }, t.prototype.build=function (t, e) { for (var o=0, n=e.length; o<n; o++) { for (var i=e[o], r=f.isArray(i)?i[0]:i, a=f.isArray(i)?i.length===1?[i[0]]:i[1]:[i], s=this.ui.buttonGroup({ className: 'note-'+r }).render(), l=0, c=a.length; l<c; l++) { var d=this.context.memo('button.'+a[l]); d&&s.append(typeof d==='function'?d(this.context):d) }s.appendTo(t) } }, t.prototype.updateCurrentStyle=function (t) { var n=this, e=t||this.$toolbar, o=this.context.invoke('editor.currentStyle'); if (this.updateBtnStates(e, { '.note-btn-bold': function () { return o['font-bold']==='bold' }, '.note-btn-italic': function () { return o['font-italic']==='italic' }, '.note-btn-underline': function () { return o['font-underline']==='underline' }, '.note-btn-subscript': function () { return o['font-subscript']==='subscript' }, '.note-btn-superscript': function () { return o['font-superscript']==='superscript' }, '.note-btn-strikethrough': function () { return o['font-strikethrough']==='strikethrough' } }), o['font-family']) { var i=o['font-family'].split(',').map(function (t) { return t.replace(/[\'\"]/g, '').replace(/\s+$/, '').replace(/^\s+/, '') }), r=j.find(i, this.isFontInstalled.bind(this)); e.find('.dropdown-fontname a').each(function (t, e) { var o=f(e), n=o.data('value')+''==r+''; o.toggleClass('checked', n) }), e.find('.note-current-fontname').text(r).css('font-family', r) } if (o['font-size']) { var a=o['font-size']; e.find('.dropdown-fontsize a').each(function (t, e) { var o=f(e), n=o.data('value')+''==a+''; o.toggleClass('checked', n) }), e.find('.note-current-fontsize').text(a) } if (o['line-height']) { var s=o['line-height']; e.find('.dropdown-line-height li a').each(function (t, e) { var o=f(e).data('value')+''==s+''; n.className=o?'checked':'' }) } }, t.prototype.updateBtnStates=function (o, t) { var n=this; f.each(t, function (t, e) { n.ui.toggleBtnActive(o.find(t), e()) }) }, t.prototype.tableMoveHandler=function (t) { var e, o=f(t.target.parentNode), n=o.next(), i=o.find('.note-dimension-picker-mousecatcher'), r=o.find('.note-dimension-picker-highlighted'), a=o.find('.note-dimension-picker-unhighlighted'); if (void 0===t.offsetX) { var s=f(t.target).offset(); e={ x: t.pageX-s.left, y: t.pageY-s.top } } else e={ x: t.offsetX, y: t.offsetY }; var l=Math.ceil(e.x/18)||1, c=Math.ceil(e.y/18)||1; r.css({ width: l+'em', height: c+'em' }), i.data('value', l+'x'+c), l>3&&l<this.options.insertTableMaxSize.col&&a.css({ width: l+1+'em' }), c>3&&c<this.options.insertTableMaxSize.row&&a.css({ height: c+1+'em' }), n.html(l+' x '+c) }, t }()), ee=(function () { function t (t) { this.context=t, this.$window=f(window), this.$document=f(document), this.ui=f.summernote.ui, this.$note=t.layoutInfo.note, this.$editor=t.layoutInfo.editor, this.$toolbar=t.layoutInfo.toolbar, this.options=t.options, this.followScroll=this.followScroll.bind(this) } return t.prototype.shouldInitialize=function () { return !this.options.airMode }, t.prototype.initialize=function () { var t=this; this.options.toolbar=this.options.toolbar||[], this.options.toolbar.length?this.context.invoke('buttons.build', this.$toolbar, this.options.toolbar):this.$toolbar.hide(), this.options.toolbarContainer&&this.$toolbar.appendTo(this.options.toolbarContainer), this.changeContainer(!1), this.$note.on('summernote.keyup summernote.mouseup summernote.change', function () { t.context.invoke('buttons.updateCurrentStyle') }), this.context.invoke('buttons.updateCurrentStyle'), this.options.followingToolbar&&this.$window.on('scroll resize', this.followScroll) }, t.prototype.destroy=function () { this.$toolbar.children().remove(), this.options.followingToolbar&&this.$window.off('scroll resize', this.followScroll) }, t.prototype.followScroll=function () { if (this.$editor.hasClass('fullscreen')) return !1; var t=this.$toolbar.parent('.note-toolbar-wrapper'), e=this.$editor.outerHeight(), o=this.$editor.width(), n=this.$toolbar.height(); t.css({ height: n }); var i=0; this.options.otherStaticBar&&(i=f(this.options.otherStaticBar).outerHeight()); var r=this.$document.scrollTop(), a=this.$editor.offset().top; a-i<r&&r<a+e-i-n?this.$toolbar.css({ position: 'fixed', top: i, width: o }):this.$toolbar.css({ position: 'relative', top: 0, width: '100%' }) }, t.prototype.changeContainer=function (t) { t?this.$toolbar.prependTo(this.$editor):this.options.toolbarContainer&&this.$toolbar.appendTo(this.options.toolbarContainer) }, t.prototype.updateFullscreen=function (t) { this.ui.toggleBtnActive(this.$toolbar.find('.btn-fullscreen'), t), this.changeContainer(t) }, t.prototype.updateCodeview=function (t) { this.ui.toggleBtnActive(this.$toolbar.find('.btn-codeview'), t), t?this.deactivate():this.activate() }, t.prototype.activate=function (t) { var e=this.$toolbar.find('button'); t||(e=e.not('.btn-codeview')), this.ui.toggleBtn(e, !0) }, t.prototype.deactivate=function (t) { var e=this.$toolbar.find('button'); t||(e=e.not('.btn-codeview')), this.ui.toggleBtn(e, !1) }, t }()), oe=(function () { function t (t) { var e=this; this.context=t, this.ui=f.summernote.ui, this.editable=t.layoutInfo.editable[0], this.options=t.options, this.events={ 'summernote.disable': function () { e.hide() } } } return t.prototype.shouldInitialize=function () { return !j.isEmpty(this.options.popover.image) }, t.prototype.initialize=function () { this.$popover=this.ui.popover({ className: 'note-image-popover' }).render().appendTo(this.options.container); var t=this.$popover.find('.popover-content,.note-popover-content'); this.context.invoke('buttons.build', t, this.options.popover.image) }, t.prototype.destroy=function () { this.$popover.remove() }, t.prototype.update=function (t) { if ($t.isImg(t)) { var e=$t.posFromPlaceholder(t), o=$t.posFromPlaceholder(this.editable); this.$popover.css({ display: 'block', left: this.options.popatmouse?event.pageX-20:e.left, top: this.options.popatmouse?event.pageY:Math.min(e.top, o.top) }) } else this.hide() }, t.prototype.hide=function () { this.$popover.hide() }, t }()), ne=(function () { function t (t) { var o=this; this.context=t, this.ui=f.summernote.ui, this.options=t.options, this.events={ 'summernote.mousedown': function (t, e) { o.update(e.target) }, 'summernote.keyup summernote.scroll summernote.change': function () { o.update() }, 'summernote.disable': function () { o.hide() } } } return t.prototype.shouldInitialize=function () { return !j.isEmpty(this.options.popover.table) }, t.prototype.initialize=function () { this.$popover=this.ui.popover({ className: 'note-table-popover' }).render().appendTo(this.options.container); var t=this.$popover.find('.popover-content,.note-popover-content'); this.context.invoke('buttons.build', t, this.options.popover.table), L.isFF&&document.execCommand('enableInlineTableEditing', !1, !1) }, t.prototype.destroy=function () { this.$popover.remove() }, t.prototype.update=function (t) { if (this.context.isDisabled()) return !1; var e=$t.isCell(t); if (e) { var o=$t.posFromPlaceholder(t); this.$popover.css({ display: 'block', left: o.left, top: o.top }) } else this.hide(); return e }, t.prototype.hide=function () { this.$popover.hide() }, t }()), ie=(function () { function t (t, e) { this.ui=f.summernote.ui, this.$note=t, this.memos={}, this.modules={}, this.layoutInfo={}, this.options=e, this.initialize() } return t.prototype.initialize=function () { return this.layoutInfo=this.ui.createLayout(this.$note, this.options), this._initialize(), this.$note.hide(), this }, t.prototype.destroy=function () { this._destroy(), this.$note.removeData('summernote'), this.ui.removeLayout(this.$note, this.layoutInfo) }, t.prototype.reset=function () { var t=this.isDisabled(); this.code($t.emptyPara), this._destroy(), this._initialize(), t&&this.disable() }, t.prototype._initialize=function () { var e=this, o=f.extend({}, this.options.buttons); Object.keys(o).forEach(function (t) { e.memo('button.'+t, o[t]) }); var n=f.extend({}, this.options.modules, f.summernote.plugins||{}); Object.keys(n).forEach(function (t) { e.module(t, n[t], !0) }), Object.keys(this.modules).forEach(function (t) { e.initializeModule(t) }) }, t.prototype._destroy=function () { var e=this; Object.keys(this.modules).reverse().forEach(function (t) { e.removeModule(t) }), Object.keys(this.memos).forEach(function (t) { e.removeMemo(t) }), this.triggerEvent('destroy', this) }, t.prototype.code=function (t) { var e=this.invoke('codeview.isActivated'); if (void 0===t) return this.invoke('codeview.sync'), e?this.layoutInfo.codable.val():this.layoutInfo.editable.html(); e?this.layoutInfo.codable.val(t):this.layoutInfo.editable.html(t), this.$note.val(t), this.triggerEvent('change', t) }, t.prototype.isDisabled=function () { return this.layoutInfo.editable.attr('contenteditable')==='false' }, t.prototype.enable=function () { this.layoutInfo.editable.attr('contenteditable', !0), this.invoke('toolbar.activate', !0), this.triggerEvent('disable', !1) }, t.prototype.disable=function () { this.invoke('codeview.isActivated')&&this.invoke('codeview.deactivate'), this.layoutInfo.editable.attr('contenteditable', !1), this.invoke('toolbar.deactivate', !0), this.triggerEvent('disable', !0) }, t.prototype.triggerEvent=function () { var t=j.head(arguments), e=j.tail(j.from(arguments)), o=this.options.callbacks[B.namespaceToCamel(t, 'on')]; o&&o.apply(this.$note[0], e), this.$note.trigger('summernote.'+t, e) }, t.prototype.initializeModule=function (t) { var e=this.modules[t]; e.shouldInitialize=e.shouldInitialize||B.ok, e.shouldInitialize()&&(e.initialize&&e.initialize(), e.events&&$t.attachEvents(this.$note, e.events)) }, t.prototype.module=function (t, e, o) { if (arguments.length===1) return this.modules[t]; this.modules[t]=new e(this), o||this.initializeModule(t) }, t.prototype.removeModule=function (t) { var e=this.modules[t]; e.shouldInitialize()&&(e.events&&$t.detachEvents(this.$note, e.events), e.destroy&&e.destroy()), delete this.modules[t] }, t.prototype.memo=function (t, e) { if (arguments.length===1) return this.memos[t]; this.memos[t]=e }, t.prototype.removeMemo=function (t) { this.memos[t]&&this.memos[t].destroy&&this.memos[t].destroy(), delete this.memos[t] }, t.prototype.createInvokeHandlerAndUpdateState=function (e, o) { var n=this; return function (t) { n.createInvokeHandler(e, o)(t), n.invoke('buttons.updateCurrentStyle') } }, t.prototype.createInvokeHandler=function (o, n) { var i=this; return function (t) { t.preventDefault(); var e=f(t.target); i.invoke(o, n||e.closest('[data-value]').data('value'), e) } }, t.prototype.invoke=function () { var t=j.head(arguments), e=j.tail(j.from(arguments)), o=t.split('.'), n=o.length>1, i=n&&j.head(o), r=n?j.last(o):j.head(o), a=this.modules[i||'editor']; return !i&&this[r]?this[r].apply(this, e):a&&a[r]&&a.shouldInitialize()?a[r].apply(a, e):void 0 }, t }()); f.fn.extend({ summernote: function () { var t=f.type(j.head(arguments)), e=t==='string', o=t==='object', i=f.extend({}, f.summernote.options, o?j.head(arguments):{}); i.langInfo=f.extend(!0, {}, f.summernote.lang['en-US'], f.summernote.lang[i.lang]), i.icons=f.extend(!0, {}, f.summernote.options.icons, i.icons), i.tooltip=i.tooltip==='auto'?!L.isSupportTouch:i.tooltip, this.each(function (t, e) { var o=f(e); if (!o.data('summernote')) { var n=new ie(o, i); o.data('summernote', n), o.data('summernote').triggerEvent('init', n.layoutInfo) } }); var n=this.first(); if (n.length) { var r=n.data('summernote'); if (e) return r.invoke.apply(r, j.from(arguments)); i.focus&&r.invoke('editor.focus') } return this } }), f.summernote=f.extend(f.summernote, { version: '0.8.10', ui: x, plugins: {}, options: { modules: { editor: Wt, clipboard: Gt, dropzone: _t, codeview: Yt, autoLink: Qt, autoSync: Xt, placeholder: Jt, buttons: te, toolbar: ee, imagePopover: oe, tablePopover: ne }, buttons: {}, lang: 'en-US', followingToolbar: !0, otherStaticBar: '', toolbar: [['style', ['style']], ['font', ['bold', 'underline', 'clear']], ['fontname', ['fontname']], ['fontsize', ['fontsize']], ['color', ['color']], ['para', ['ul', 'ol', 'paragraph']], ['table', ['table']], ['insert', ['link', 'picture', 'video']], ['view', ['fullscreen', 'codeview', 'help']]], popatmouse: !0, popover: { image: [['imagesize', ['imageSize100', 'imageSize50', 'imageSize25']], ['float', ['floatLeft', 'floatRight', 'floatNone']], ['remove', ['removeMedia']]], link: [['link', ['linkDialogShow', 'unlink']]], table: [['add', ['addRowDown', 'addRowUp', 'addColLeft', 'addColRight']], ['delete', ['deleteRow', 'deleteCol', 'deleteTable']]], air: [['color', ['color']], ['font', ['bold', 'underline', 'clear']], ['para', ['ul', 'paragraph']], ['table', ['table']], ['insert', ['link', 'picture']]] }, airMode: !1, width: null, height: null, linkTargetBlank: !0, focus: !1, tabSize: 4, styleWithSpan: !0, shortcuts: !0, textareaAutoSync: !0, hintDirection: 'bottom', tooltip: 'auto', container: 'body', maxTextLength: 0, styleTags: ['p', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'], fontNames: ['Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande', 'Tahoma', 'Times New Roman', 'Verdana'], fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'], colors: [['#000000', '#424242', '#636363', '#9C9C94', '#CEC6CE', '#EFEFEF', '#F7F7F7', '#FFFFFF'], ['#FF0000', '#FF9C00', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#9C00FF', '#FF00FF'], ['#F7C6CE', '#FFE7CE', '#FFEFC6', '#D6EFD6', '#CEDEE7', '#CEE7F7', '#D6D6E7', '#E7D6DE'], ['#E79C9C', '#FFC69C', '#FFE79C', '#B5D6A5', '#A5C6CE', '#9CC6EF', '#B5A5D6', '#D6A5BD'], ['#E76363', '#F7AD6B', '#FFD663', '#94BD7B', '#73A5AD', '#6BADDE', '#8C7BC6', '#C67BA5'], ['#CE0000', '#E79439', '#EFC631', '#6BA54A', '#4A7B8C', '#3984C6', '#634AA5', '#A54A7B'], ['#9C0000', '#B56308', '#BD9400', '#397B21', '#104A5A', '#085294', '#311873', '#731842'], ['#630000', '#7B3900', '#846300', '#295218', '#083139', '#003163', '#21104A', '#4A1031']], colorsName: [['Black', 'Tundora', 'Dove Gray', 'Star Dust', 'Pale Slate', 'Gallery', 'Alabaster', 'White'], ['Red', 'Orange Peel', 'Yellow', 'Green', 'Cyan', 'Blue', 'Electric Violet', 'Magenta'], ['Azalea', 'Karry', 'Egg White', 'Zanah', 'Botticelli', 'Tropical Blue', 'Mischka', 'Twilight'], ['Tonys Pink', 'Peach Orange', 'Cream Brulee', 'Sprout', 'Casper', 'Perano', 'Cold Purple', 'Careys Pink'], ['Mandy', 'Rajah', 'Dandelion', 'Olivine', 'Gulf Stream', 'Viking', 'Blue Marguerite', 'Puce'], ['Guardsman Red', 'Fire Bush', 'Golden Dream', 'Chelsea Cucumber', 'Smalt Blue', 'Boston Blue', 'Butterfly Bush', 'Cadillac'], ['Sangria', 'Mai Tai', 'Buddha Gold', 'Forest Green', 'Eden', 'Venice Blue', 'Meteorite', 'Claret'], ['Rosewood', 'Cinnamon', 'Olive', 'Parsley', 'Tiber', 'Midnight Blue', 'Valentino', 'Loulou']], lineHeights: ['1.0', '1.2', '1.4', '1.5', '1.6', '1.8', '2.0', '3.0'], tableClassName: 'table table-bordered', insertTableMaxSize: { col: 10, row: 10 }, dialogsInBody: !1, dialogsFade: !1, maximumImageFileSize: null, callbacks: { onInit: null, onFocus: null, onBlur: null, onBlurCodeview: null, onEnter: null, onKeyup: null, onKeydown: null, onSubmit: null, onImageUpload: null, onImageUploadError: null, onImageLinkInsert: null }, codemirror: { mode: 'text/html', htmlMode: !0, lineNumbers: !0 }, keyMap: { pc: { ENTER: 'insertParagraph', 'CTRL+Z': 'undo', 'CTRL+Y': 'redo', TAB: 'tab', 'SHIFT+TAB': 'untab', 'CTRL+B': 'bold', 'CTRL+I': 'italic', 'CTRL+U': 'underline', 'CTRL+SHIFT+S': 'strikethrough', 'CTRL+BACKSPACE': 'removeFormat', 'CTRL+SHIFT+L': 'justifyLeft', 'CTRL+SHIFT+E': 'justifyCenter', 'CTRL+SHIFT+R': 'justifyRight', 'CTRL+SHIFT+J': 'justifyFull', 'CTRL+SHIFT+NUM7': 'insertUnorderedList', 'CTRL+SHIFT+NUM8': 'insertOrderedList', 'CTRL+LEFTBRACKET': 'outdent', 'CTRL+RIGHTBRACKET': 'indent', 'CTRL+NUM0': 'formatPara', 'CTRL+NUM1': 'formatH1', 'CTRL+NUM2': 'formatH2', 'CTRL+NUM3': 'formatH3', 'CTRL+NUM4': 'formatH4', 'CTRL+NUM5': 'formatH5', 'CTRL+NUM6': 'formatH6', 'CTRL+ENTER': 'insertHorizontalRule', 'CTRL+K': 'linkDialog.show' }, mac: { ENTER: 'insertParagraph', 'CMD+Z': 'undo', 'CMD+SHIFT+Z': 'redo', TAB: 'tab', 'SHIFT+TAB': 'untab', 'CMD+B': 'bold', 'CMD+I': 'italic', 'CMD+U': 'underline', 'CMD+SHIFT+S': 'strikethrough', 'CMD+BACKSPACE': 'removeFormat', 'CMD+SHIFT+L': 'justifyLeft', 'CMD+SHIFT+E': 'justifyCenter', 'CMD+SHIFT+R': 'justifyRight', 'CMD+SHIFT+J': 'justifyFull', 'CMD+SHIFT+NUM7': 'insertUnorderedList', 'CMD+SHIFT+NUM8': 'insertOrderedList', 'CMD+LEFTBRACKET': 'outdent', 'CMD+RIGHTBRACKET': 'indent', 'CMD+NUM0': 'formatPara', 'CMD+NUM1': 'formatH1', 'CMD+NUM2': 'formatH2', 'CMD+NUM3': 'formatH3', 'CMD+NUM4': 'formatH4', 'CMD+NUM5': 'formatH5', 'CMD+NUM6': 'formatH6', 'CMD+ENTER': 'insertHorizontalRule', 'CMD+K': 'linkDialog.show' } }, icons: { align: 'note-icon-align', alignCenter: 'note-icon-align-center', alignJustify: 'note-icon-align-justify', alignLeft: 'note-icon-align-left', alignRight: 'note-icon-align-right', rowBelow: 'note-icon-row-below', colBefore: 'note-icon-col-before', colAfter: 'note-icon-col-after', rowAbove: 'note-icon-row-above', rowRemove: 'note-icon-row-remove', colRemove: 'note-icon-col-remove', indent: 'note-icon-align-indent', outdent: 'note-icon-align-outdent', arrowsAlt: 'note-icon-arrows-alt', bold: 'note-icon-bold', caret: 'note-icon-caret', circle: 'note-icon-circle', close: 'note-icon-close', code: 'note-icon-code', eraser: 'note-icon-eraser', font: 'note-icon-font', frame: 'note-icon-frame', italic: 'note-icon-italic', link: 'note-icon-link', unlink: 'note-icon-chain-broken', magic: 'note-icon-magic', menuCheck: 'note-icon-menu-check', minus: 'note-icon-minus', orderedlist: 'note-icon-orderedlist', pencil: 'note-icon-pencil', picture: 'note-icon-picture', question: 'note-icon-question', redo: 'note-icon-redo', square: 'note-icon-square', strikethrough: 'note-icon-strikethrough', subscript: 'note-icon-subscript', superscript: 'note-icon-superscript', table: 'note-icon-table', textHeight: 'note-icon-text-height', trash: 'note-icon-trash', underline: 'note-icon-underline', undo: 'note-icon-undo', unorderedlist: 'note-icon-unorderedlist', video: 'note-icon-video' } } }) }))
